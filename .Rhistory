plot(MNFT_mod)
?Filter
elev_MNFT_input[lapply(elev_MNFT_input, length)>0]
elev_MNFT_input[lapply(elev_MNFT_input, length)>1]
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
elev_MNFT_input[lapply(elev_MNFT_input, length)>1]
# create MOUNTAIN:TYPE list for iNEXT
MN_FT_counter<-length(unique(elev_MF$MName_FType))
elev_MNFT_input<- list()
for (i in 1:MN_FT_counter){
tmp <- as.data.frame(elev_MF[i,-c(1,2,31)])
tmp<-tmp[tmp>0]
elev_MNFT_input[[i]]<-tmp
}
names(elev_MNFT_input)<-unique(elev_MF$MName_FType)
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
elev_MNFT_input <- elev_MNFT_input[lapply(elev_MNFT_input, length)>1]
MNFT_mod <- iNEXT(elev_MNFT_input, datatype = 'abundance', nboot = 999)
elev_MNFT_input
plot(MNFT_mod)
par(mfrow = c(1,3))
plot(band_mod)
plot(type_mod)
plot(MNFT_mod)
par(mfrow = c(1,3))
plot(band_mod, q=1)
plot(type_mod, q=1)
plot(MNFT_mod, q=1)
?plot.iNEXT
plot(MNFT_mod, type = 2)
par(mfrow = c(1,3))
plot(band_mod, type = 2)
plot(type_mod, type = 2)
plot(MNFT_mod, type = 2)
par(mfrow = c(1,3))
plot(band_mod, type = 3)
plot(type_mod, type = 3)
plot(MNFT_mod, type = 3)
## Nada Chapters 2-3 iNext Modelling ----
## libraries ----
library(iNEXT)
library(tidyverse)
## data import ----
# forest compartment
compart <- read.csv('SpeciesAdultData/All_DTC2.csv')
str(compart)
compart %>%
select(ForestCategory, Sp.01:Sp.27)
compart %>%
filter(LoggingRotation == 1) %>%
select(ForestCategory, Sp.01:Sp.27) %>%
group_by(ForestCategory) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
compart %>%
filter(LoggingRotation == 1) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
compart %>%
filter(LoggingRotation == 1) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
comp_age<-compart %>%
filter(LoggingRotation == 1) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
# create Age based list for iNEXT
age_counter<-length(unique(comp_age$Age_Name))
age_counter
compartment_input<- list()
for (i in 1:age_counter){
tmp <- as.data.frame(comp_age[i,-c(1,2,31)])
tmp<-tmp[tmp>0]
compartment_input[[i]]<-tmp
}
for (i in 1:age_counter){
tmp <- select(comp_age, Sp.1:Sp.27)
tmp <- tmp[i,]
tmp<-tmp[tmp>0]
compartment_input[[i]]<-tmp
}
for (i in 1:age_counter){
tmp <- tmp[i,]
tmp <- select(comp_age, Sp.01:Sp.27)
tmp<-tmp[tmp>0]
compartment_input[[i]]<-tmp
}
i = 1
for (i in 1:age_counter){
tmp <- comp_age[i,]
tmp <- select(tmp, Sp.01:Sp.27)
tmp <- tmp[tmp>0]
compartment_input[[i]]<-tmp
}
i=1
comp_age[i,]
tmp <- comp_age[i,]
select(tmp, Sp.01:Sp.27)
select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
comp_age[i,]
tmp <- comp_age[i,]
select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp <- as.data.frame(comp_age[i,])
select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp <- select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp[tmp>0]
for (i in 1:age_counter){
tmp <- as.data.frame(comp_age[i,])
tmp <- select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp <- tmp[tmp>0]
compartment_input[[i]]<-tmp
}
# create Age based list for iNEXT
age_counter<-length(unique(comp_age$Age_Band))
comp_age
# create Age based list for iNEXT
age_counter<-length(unique(comp_age$Age_Name))
age_counter
comp_age<-compart %>%
filter(LoggingRotation == 1) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
# create Age based list for iNEXT
age_counter<-length(unique(comp_age$Age_Name))
compartment_input<- list()
# isolate the species count data for each age-transect
for (i in 1:age_counter){
tmp <- as.data.frame(comp_age[i,])
tmp <- select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp <- tmp[tmp>0]
compartment_input[[i]]<-tmp
}
names(compartment_input)<-unique(comp_age$Age_Name)
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
compartment_input <- compartment_input[lapply(compartment_input, length)>1]
# iNEXT model
compartment_mod <- iNEXT(compartment_input, datatype = 'abundance', nboot = 999)
compartment_input<- list()
# isolate the species count data for each age-transect
for (i in 1:age_counter){
tmp <- as.data.frame(comp_age[i,])
tmp <- select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp <- tmp[tmp>0]
compartment_input[[i]]<-tmp
}
names(compartment_input)<-unique(comp_age$Age_Name)
compartment_input
compartment_input[lapply(compartment_input, length)>1]
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
compartment_input <- compartment_input[lapply(compartment_input, length)>1]
# iNEXT model
compartment_mod <- iNEXT(compartment_input, datatype = 'abundance', nboot = 999)
compartment_input[lapply(compartment_input, length)==1]
# visualise
plot(compartment_mod)
# Collect Asymptotic estimates and plot
compartment_mod$AsyEst
filter(compartment_mod$AsyEst, Diversity == "Species richness")
SR_estimates <- filter(compartment_mod$AsyEst, Diversity == "Species richness")
ls()
str_split(SR_estimates$Site, ":"
)
str_split(SR_estimates$Site, ":", simplify = TRUE)
select(str_split(SR_estimates$Site, ":", simplify = TRUE),1)
compartment_mod$AsyEst %>%
filter(Diversity == "Species richness") %>%
mutate(Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
SR_estimates <- compartment_mod$AsyEst %>%
filter(Diversity == "Species richness") %>%
mutate(Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
# figure
ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point()+
theme_bw()
compart$LoggingRotation
comp_age<-compart %>%
filter(LoggingRotation != 2) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
# create Age based list for iNEXT
age_counter<-length(unique(comp_age$Age_Name))
compartment_input<- list()
# isolate the species count data for each age-transect
for (i in 1:age_counter){
tmp <- as.data.frame(comp_age[i,])
tmp <- select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp <- tmp[tmp>0]
compartment_input[[i]]<-tmp
}
names(compartment_input)<-unique(comp_age$Age_Name)
names(compartment_input)
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
compartment_input <- compartment_input[lapply(compartment_input, length)>1]
# iNEXT model
# some odd errors, as all sites have more than 1
compartment_mod <- iNEXT(compartment_input, datatype = 'abundance', nboot = 999)
# visualise
plot(compartment_mod)
# Collect Asymptotic estimates and plot
SR_estimates <- compartment_mod$AsyEst %>%
filter(Diversity == "Species richness") %>%
mutate(Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
# figure
ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point()+
theme_bw()
str(compart)
compart$ForestType
compart$ForestCategory
compart %>%
filter(LoggingRotation != 2)
compart %>%
filter(LoggingRotation != 2) %>% tail()
as.data.frame(compart)
tail(as.data.frame(compart))
compart %>%
filter(LoggingRotation ==1 | LoggingRotation == NA)
comp_age<-compart %>%
filter(LoggingRotation == 1 | LoggingRotation == NA) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
comp_age
comp_age$ForestCategory
#colsums by forest band to get iNEXT vals
comp_age<-compart %>%
filter(LoggingRotation == 1 || LoggingRotation == NA) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
comp_age$ForestCategory
comp_age<-compart %>%
filter(LoggingRotation == 1 || LoggingRotation == NA) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
# create Age based list for iNEXT
age_counter<-length(unique(comp_age$Age_Name))
compartment_input<- list()
# isolate the species count data for each age-transect
for (i in 1:age_counter){
tmp <- as.data.frame(comp_age[i,])
tmp <- select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp <- tmp[tmp>0]
compartment_input[[i]]<-tmp
}
names(compartment_input)<-unique(comp_age$Age_Name)
compartment_input <- compartment_input[lapply(compartment_input, length)>1]
# iNEXT model
# some odd errors, as all sites have more than 1
compartment_mod <- iNEXT(compartment_input, datatype = 'abundance', nboot = 999)
# visualise
plot(compartment_mod)
# Collect Asymptotic estimates and plot
SR_estimates <- compartment_mod$AsyEst %>%
filter(Diversity == "Species richness") %>%
mutate(Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
# figure
ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point()+
theme_bw()
compartment_mod
compartment_mod$AsyEst %>%
filter(Diversity == "Species richness") %>%
mutate(Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
compartment_mod$AsyEst
compartment_mod$AsyEst %>%
filter(Diversity == "Species richness")
str_split(SR_estimates$Site, ":", simplify = TRUE)
SR_estimates <- compartment_mod$AsyEst %>%
filter(Diversity == "Species richness")
str_split(SR_estimates$Site, ":", simplify = TRUE)
# Collect Asymptotic estimates and plot
SR_estimates <- compartment_mod$AsyEst %>%
filter(Diversity == "Species richness")
SR_estimates <- mutate(Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
SR_estimates <- mutate(SR_estimates, Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point()+
theme_bw()
names(compart)
compart$ForestType
compart %>%
filter(str_detect(ForestType, "twice"))
compart %>%
filter(!str_detect(ForestType, "twice"))
comp_age<-compart %>%
filter(!str_detect(ForestType, "twice")) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
# create Age based list for iNEXT
age_counter<-length(unique(comp_age$Age_Name))
compartment_input<- list()
# isolate the species count data for each age-transect
for (i in 1:age_counter){
tmp <- as.data.frame(comp_age[i,])
tmp <- select(tmp, -ForestCategory, - CompartmentName, -Age_Name)
tmp <- tmp[tmp>0]
compartment_input[[i]]<-tmp
}
names(compartment_input)<-unique(comp_age$Age_Name)
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
compartment_input <- compartment_input[lapply(compartment_input, length)>1]
# iNEXT model
# some odd errors, as all sites have more than 1
compartment_mod <- iNEXT(compartment_input, datatype = 'abundance', nboot = 999)
# visualise
plot(compartment_mod)
# Collect Asymptotic estimates and plot
SR_estimates <- compartment_mod$AsyEst %>%
filter(Diversity == "Species richness")
SR_estimates <- mutate(SR_estimates, Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
# figure
ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point()+
theme_bw()
ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point()+
geom_smooth()+
theme_bw()
# figure
ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point(size = 4, colour = 'cornflowerblue')+
geom_smooth(method = lm)+
theme_bw()
SR_sumDat <- SR_estimates %>%
group_by(Age_class) %>%
summarise(
meanSR = mean(Diversity),
seSR = sd(Diversity)/sqrt(n()))
SR_estimates
SR_sumDat <- SR_estimates %>%
group_by(Age_class) %>%
summarise(
meanSR = mean(Estimator),
seSR = sd(Estimator)/sqrt(n()))
ggplot(SR_sumDat, aes(x = Age_class, y = Estimator, ymin = meanSR - seSR, ymax = meanSR + seSR))+
geom_point(size = 4, colour = 'cornflowerblue')+
geom_errorbar(width = 0.1)+
theme_bw()
ggplot(SR_sumDat, aes(x = Age_class, y = meanSR, ymin = meanSR - seSR, ymax = meanSR + seSR))+
geom_point(size = 4, colour = 'cornflowerblue')+
geom_errorbar(width = 0.1)+
theme_bw()
library(gridExtra)
?dplyr::combine
p1 <- ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point(size = 4, colour = 'cornflowerblue')+
theme_bw()
p2 <- ggplot(SR_sumDat, aes(x = Age_class, y = meanSR, ymin = meanSR - seSR, ymax = meanSR + seSR))+
geom_point(size = 4, colour = 'cornflowerblue')+
geom_errorbar(width = 0.1)+
theme_bw()
grid.arrange(p1, p2)
# visualise
plot(compartment_mod)
compartment_mod$AsyEst
SR_estimates$Site
SR_estimates
modSR <- lm(Estimator ~ Age_class, data = SR_estimates)
anova(modSR)
## Nada Chapters 2-3 iNext Modelling ----
## libraries ----
library(iNEXT)
library(tidyverse)
library(gridExtra)
## Step 0: data import ----
# forest compartment
compart <- read.csv('SpeciesAdultData/All_DTC2.csv')
str(compart)
# Step 1: calculate column sums by forest category and compartment name to get iNEXT vals ----
# isolate the data on logged 1 time or unlogged
# get category and compartment name and species
# sort and summarise_all creates column sums
# age a new column that combines age and name (e.g. the three compartments within each age category)
comp_age<-compart %>%
filter(!str_detect(ForestType, "twice")) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
comp_age
age_counter<-length(unique(comp_age$Age_Name))
# collection zone setup
compartment_input<- list()
# isolate the species count data for each age-compartment
for (i in 1:age_counter){
tmp <- as.data.frame(comp_age[i,]) # get a single compartment
tmp <- select(tmp, -ForestCategory, - CompartmentName, -Age_Name) # isolate the species data
tmp <- tmp[tmp>0] # clean away any 0's
compartment_input[[i]]<-tmp # assign to the list above
}
compartment_input
# run iNEXT (it works on a list)
# some odd errors, as all sites have more than 1
compartment_mod <- iNEXT(compartment_input, datatype = 'abundance', nboot = 999)
# visualise the results
# feel free to create more than one version of this!
plot(compartment_mod)
names(compartment_input)<-unique(comp_age$Age_Name)
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
compartment_input <- compartment_input[lapply(compartment_input, length)>1]
#  Step 3: iNEXT modelling happens here -----
# run iNEXT (it works on a list)
# some odd errors, as all sites have more than 1
compartment_mod <- iNEXT(compartment_input, datatype = 'abundance', nboot = 999)
# visualise the results
# feel free to create more than one version of this!
plot(compartment_mod)
# Collect Species Richness estimates (Shannon and Simpson also available)
SR_estimates <- compartment_mod$AsyEst %>%
filter(Diversity == "Species richness")
SR_estimates
SR_sumDat <- SR_estimates %>%
group_by(Age_class) %>%
summarise(
meanSR = mean(Estimator),
seSR = sd(Estimator)/sqrt(n()))
p1 <- ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point(size = 4, colour = 'cornflowerblue')+
theme_bw()
p2 <- ggplot(SR_sumDat, aes(x = Age_class, y = meanSR, ymin = meanSR - seSR, ymax = meanSR + seSR))+
geom_point(size = 4, colour = 'cornflowerblue')+
geom_errorbar(width = 0.1)+
theme_bw()
grid.arrange(p1, p2)
SR_estimates <- mutate(SR_estimates,
Age_class = str_split(SR_estimates$Site, ":", simplify = TRUE)[,1])
# This creates mean and se estimates from the above replicated data on species richness
SR_sumDat <- SR_estimates %>%
group_by(Age_class) %>%
summarise(
meanSR = mean(Estimator),
seSR = sd(Estimator)/sqrt(n()))
# Step 5: Visualise the pattern of SR estimates with Age of forest since logging ----
p1 <- ggplot(SR_estimates, aes(x = Age_class, y = Estimator))+
geom_point(size = 4, colour = 'cornflowerblue')+
theme_bw()
p2 <- ggplot(SR_sumDat, aes(x = Age_class, y = meanSR, ymin = meanSR - seSR, ymax = meanSR + seSR))+
geom_point(size = 4, colour = 'cornflowerblue')+
geom_errorbar(width = 0.1)+
theme_bw()
grid.arrange(p1, p2)
SR_estimates
str(compart)
compart$CompartmentName
levels(compart$CompartmentName)
str(compart)
levels(compart$ForestType)
comp_age
names(compart)
compart$TransectByForest
with(compart, table(CompartmentName))
with(compart, table(ForestCategory))
with(compart, table(ForestCategory,CompartmentName))
comp_age<-compart %>%
filter(!str_detect(ForestType, "twice")) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
with(comp_age, table(ForestCategory,CompartmentName))
compart %>%
filter(!str_detect(ForestType, "twice")) %>%
select(ForestCategory, CompartmentName,TransectByForest)
table(compart)
with(compart, table(ForestCategory, CompartmentName))
comp_age<-compart %>%
filter(!str_detect(ForestType, "twice")) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
comp_age
with(compart, table(ForestCategory, CompartmentName))
names(compart)
compart$ForestType
with(compart, table(ForestType, CompartmentName))
## Nada Chapters 2-3 iNext Modelling ----
## libraries ----
library(iNEXT)
library(tidyverse)
library(gridExtra)
## Step 0: data import ----
# forest compartment
compart <- read.csv('SpeciesAdultData/All_DTC2.csv')
str(compart)
# Step 1: calculate column sums by forest category and compartment name to get iNEXT vals ----
# isolate the data on logged 1 time or unlogged
# get category and compartment name and species
# sort and summarise_all creates column sums
# age a new column that combines age and name (e.g. the three compartments within each age category)
comp_age<-compart %>%
filter(!str_detect(ForestType, "twice")) %>%
select(ForestCategory, CompartmentName, Sp.01:Sp.27) %>%
group_by(ForestCategory, CompartmentName) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
mutate(Age_Name = paste(ForestCategory, CompartmentName, sep = ':'))
comp_age
