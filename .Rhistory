all_hab <- data.frame(
hab_Litter,
select(hab_Canopy, SampleCanopy, CanopyClosure),
select(hab_Herb, SampleHerb, HerbHeight)
)
dim(all_hab)
dim(hab_Herb); dim(hab_Canopy); dim(hab_Litter)
dim(all_hab)
# Create Nada Habitat Summary Data
library(tidyverse)
hab_master <- read_csv("./SpeciesAdultData/RawHabitatData.csv")
names(hab_master)
hab_Litter <- hab_master %>%
gather(key = SampleLitter, value = LeafLitter,
LeafLitter1:LeafLitter12) %>%
select(Compartment, `Age of forest`, LoggingRotation, SampleLitter, LeafLitter)
head(hab_Litter)
hab_Canopy <- hab_master %>%
gather(key = SampleCanopy, value = CanopyClosure,
CanopyClosure1:CanopyClosure12) %>%
select(Compartment, `Age of forest`, LoggingRotation, SampleCanopy, CanopyClosure)
hab_Herb <- hab_master %>%
gather(key = SampleHerb, value = HerbHeight,
HerbHeight1:HerbHeight6) %>%
select(Compartment, `Age of forest`, LoggingRotation, SampleHerb, HerbHeight)
all_hab <- data.frame(
hab_Litter,
select(hab_Canopy, SampleCanopy, CanopyClosure),
select(hab_Herb, SampleHerb, HerbHeight)
)
dim(hab_Herb); dim(hab_Canopy); dim(hab_Litter)
dim(all_hab)
hab_Herb %>%
group_by(Compartment, `Age of Forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight))
names(hab_Herb)
hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight))
hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE))
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE))
head(Herb_means)
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE))
head(Herb_means)
hab_Canopy
Canopy_means <- hab_Canopy %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(canopy_mean_closure = mean(CanopyClosure, na.rm = TRUE))
head(Canopy_means)
names(hab_Litter)
Litter_means <- hab_Litter %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(litter_mean_depth = mean(LeafLitter, na.rm = TRUE))
head(Litter_means)
Herb_means %>% filter(LoggingRotation == 1)
Herb_means %>% filter(LoggingRotation == 1) %>% dim()
Herb_means %>% filter(LoggingRotation == 1) %>% dim()
Litter_means %>% filter(LoggingRotation == 1) %>% dim()
Canopy_means %>% filter(LoggingRotation == 1) %>% dim()
Herb_means_Rot1 <- Herb_means %>% filter(LoggingRotation == 1)
Litter_means_Rot1 %>% filter(LoggingRotation == 1)
Canopy_means_Rot1 %>% filter(LoggingRotation == 1)
Herb_means_Rot1 <- Herb_means %>% filter(LoggingRotation == 1)
Litter_means_Rot1 <- Litter_means %>% filter(LoggingRotation == 1)
Canopy_means_Rot1 <- Canopy_means %>% filter(LoggingRotation == 1)
hab_means_rot1 <- data.frame(Herb_means_Rot1,
select(Litter_means_Rot1, litter_mean_depth),
select(Canopy_means_Rot1, canopy_mean_closure))
Herb_means_Rot1
Litter_means_Rot1
hab_means_rot1 <- data.frame(Herb_means_Rot1,
select(Litter_means_Rot1, litter_mean_depth),
select(Canopy_means_Rot1, canopy_mean_closure))
head(hab_means_rot1)
hab_means_rot1 <- tibble(Herb_means_Rot1,
select(Litter_means_Rot1, litter_mean_depth),
select(Canopy_means_Rot1, canopy_mean_closure))
head(hab_means_rot1)
select(Litter_means_Rot1, litter_mean_depth)
Litter_means_Rot1
select(Litter_means_Rot1, litter_mean_depth)
hab_means_rot1 <- tibble(Herb_means_Rot1,
dplyr::select(Litter_means_Rot1, litter_mean_depth),
dplyr::select(Canopy_means_Rot1, canopy_mean_closure))
head(hab_means_rot1)
Herb_means_Rot1 <- Herb_means %>% filter(LoggingRotation == 1)
Litter_means_Rot1 <- Litter_means %>% filter(LoggingRotation == 1) %>% select(litter_mean_depth)
Canopy_means_Rot1 <- Canopy_means %>% filter(LoggingRotation == 1) %>% select(canopy_mean_closure)
hab_means_rot1 <- data.frame(Herb_means_Rot1, Litter_means_Rot1, Canopy_means_Rot1)
head(hab_means_rot1)
Litter_means_Rot1
Litter_means <- hab_Litter %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(litter_mean_depth = mean(LeafLitter, na.rm = TRUE))
head(Litter_means)
Herb_means_Rot1 <- Herb_means %>% filter(LoggingRotation == 1)
Litter_means_Rot1 <- Litter_means %>% filter(LoggingRotation == 1) %>% select(litter_mean_depth)
Canopy_means_Rot1 <- Canopy_means %>% filter(LoggingRotation == 1) %>% select(canopy_mean_closure)
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE))
head(Herb_means)
Canopy_means <- hab_Canopy %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(canopy_mean_closure = mean(CanopyClosure, na.rm = TRUE))
head(Canopy_means)
Litter_means <- hab_Litter %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(litter_mean_depth = mean(LeafLitter, na.rm = TRUE))
head(Litter_means)
Herb_means_Rot1 <- Herb_means %>% filter(LoggingRotation == 1)
Litter_means_Rot1 <- Litter_means %>% filter(LoggingRotation == 1) %>% select(litter_mean_depth)
Canopy_means_Rot1 <- Canopy_means %>% filter(LoggingRotation == 1) %>% select(canopy_mean_closure)
library(tidyverse)
hab_master <- read_csv("./SpeciesAdultData/RawHabitatData.csv")
names(hab_master)
hab_Litter <- hab_master %>%
gather(key = SampleLitter, value = LeafLitter,
LeafLitter1:LeafLitter12) %>%
select(Compartment, `Age of forest`, LoggingRotation,
SampleLitter, LeafLitter)
head(hab_Litter)
hab_Canopy <- hab_master %>%
gather(key = SampleCanopy, value = CanopyClosure,
CanopyClosure1:CanopyClosure12) %>%
select(Compartment, `Age of forest`, LoggingRotation,
SampleCanopy, CanopyClosure)
hab_Herb <- hab_master %>%
gather(key = SampleHerb, value = HerbHeight,
HerbHeight1:HerbHeight6) %>%
select(Compartment, `Age of forest`, LoggingRotation,
SampleHerb, HerbHeight)
dim(hab_Herb); dim(hab_Canopy); dim(hab_Litter)
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE))
head(Herb_means)
Canopy_means <- hab_Canopy %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(canopy_mean_closure = mean(CanopyClosure, na.rm = TRUE))
head(Canopy_means)
Litter_means <- hab_Litter %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(litter_mean_depth = mean(LeafLitter, na.rm = TRUE))
head(Litter_means)
Herb_means_Rot1 <- Herb_means %>% filter(LoggingRotation == 1)
Litter_means_Rot1 <- Litter_means %>% filter(LoggingRotation == 1) %>% select(litter_mean_depth)
Canopy_means_Rot1 <- Canopy_means %>% filter(LoggingRotation == 1) %>% select(canopy_mean_closure)
?select
update.packages()
library(tidyverse)
Herb_means_Rot1 <- Herb_means %>% filter(LoggingRotation == 1)
Litter_means_Rot1 <- Litter_means %>% filter(LoggingRotation == 1) %>% select(litter_mean_depth)
Canopy_means_Rot1 <- Canopy_means %>% filter(LoggingRotation == 1) %>% select(canopy_mean_closure)
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE)) %>%
filter(LoggingRotation == 1)
head(Herb_means)
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE)) %>%
filter(LoggingRotation == 1)
head(Herb_means)
Canopy_means <- hab_Canopy %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(canopy_mean_closure = mean(CanopyClosure, na.rm = TRUE)) %>%
filter(LoggingRotation == 1)
head(Canopy_means)
Litter_means <- hab_Litter %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(litter_mean_depth = mean(LeafLitter, na.rm = TRUE)) %>%
filter(LoggingRotation == 1)
head(Litter_means)
Canopy_means <- hab_Canopy %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(canopy_mean_closure = mean(CanopyClosure, na.rm = TRUE)) %>%
filter(LoggingRotation == 1) %>%
select(canopy_mean_closure)
head(Canopy_means)
Canopy_means <- hab_Canopy %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(canopy_mean_closure = mean(CanopyClosure, na.rm = TRUE)) %>%
filter(LoggingRotation == 1) %>%
ungroup() %>%
select(canopy_mean_closure)
head(Canopy_means)
hab_means_rot1 <- data.frame(Herb_means, Litter_means, Canopy_means)
head(hab_means_rot1)
Litter_means <- hab_Litter %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(litter_mean_depth = mean(LeafLitter, na.rm = TRUE)) %>%
filter(LoggingRotation == 1) %>%
ungroup() %>%
select(litter_mean_depth)
head(Litter_means)
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE)) %>%
filter(LoggingRotation == 1) %>%
ungroup()
head(Herb_means)
Canopy_means <- hab_Canopy %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(canopy_mean_closure = mean(CanopyClosure, na.rm = TRUE)) %>%
filter(LoggingRotation == 1) %>%
ungroup() %>%
select(canopy_mean_closure)
head(Canopy_means)
Litter_means <- hab_Litter %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(litter_mean_depth = mean(LeafLitter, na.rm = TRUE)) %>%
filter(LoggingRotation == 1) %>%
ungroup() %>%
select(litter_mean_depth)
head(Litter_means)
hab_means_rot1 <- data.frame(Herb_means, Litter_means, Canopy_means)
head(hab_means_rot1)
hab_means_rot1 <- data.frame(Herb_means, Litter_means, Canopy_means)
head(hab_means_rot1)
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE),
herb_sd_height = sd(HerbHeight, na.rm = TRUE),
herb_n_height = sum(!is.na(HerbHeight))) %>%
filter(LoggingRotation == 1) %>%
ungroup()
head(Herb_means)
Herb_means <- hab_Herb %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(herb_mean_height = mean(HerbHeight, na.rm = TRUE),
herb_sd_height = sd(HerbHeight, na.rm = TRUE),
herb_n_height = sum(!is.na(HerbHeight))) %>%
filter(LoggingRotation == 1) %>%
ungroup()
head(Herb_means)
Canopy_means <- hab_Canopy %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(canopy_mean_closure = mean(CanopyClosure, na.rm = TRUE),
canopy_sd_closure = sd(CanopyClosure, na.rm = TRUE),
canopy_n_closure = sum(!is.na(CanopyClosure))) %>%
filter(LoggingRotation == 1) %>%
ungroup() %>%
select(canopy_mean_closure, canopy_sd_closure, canopy_n_closure)
head(Canopy_means)
Litter_means <- hab_Litter %>%
group_by(Compartment, `Age of forest`, LoggingRotation) %>%
summarise(litter_mean_depth = mean(LeafLitter, na.rm = TRUE),
litter_sd_depth = sd(LeafLitter, na.rm = TRUE),
litter_n_depth = sum(!is.na(LeafLitter))) %>%
filter(LoggingRotation == 1) %>%
ungroup() %>%
select(litter_mean_depth, litter_sd_depth, litter_n_depth)
head(Litter_means)
hab_means_rot1 <- data.frame(Herb_means, Litter_means, Canopy_means)
head(hab_means_rot1)
hab_summary_rot1 <- data.frame(Herb_means, Litter_means, Canopy_means)
?starts_with
hab_summary_rot1 <- data.frame(Herb_means, Litter_means, Canopy_means)
hab_summary_rot1 <- select(hab_summary_rot1,
Compartment,
Age.of.forest,
contains("_mean_"),
contains("_sd_"),
contains("_n_")
)
head(hab_means_rot1)
names(hab_summary_rot1)
head(hab_means_rot1)
head(hab_summary_rot1)
write_csv(hab_summary_rot1, path = "hab_summary_rot1.csv")
write_csv(hab_summary_rot1, path = "./SpeciesAdultData/hab_summary_rot1.csv")
glimpse(HillDipt)
unique(HillDipt$CompartmentName)
HillDipt <- read.csv("./CrossVal_Example/HillDipt.csv")
glimpse(HillDipt)
unique(HillDipt$CompartmentName)
library(tidyverse)
library(iNEXT)
source('Nada_Function_MAD.R')
glimpse(HillDipt)
unique(HillDipt$CompartmentName)
glimpse(HillDipt)
unique(HillDipt$MountainName)
unique(HillDipt$Elevation)
# setup with libraries
library(tidyverse)
library(iNEXT)
# ---------------------------------------
# source the function
# this grabs the function and loads it into R's brain
# to use.
source('Nada_Function_MAD.R')
# ---------------------------------------
HillDipt <- read.csv("./CrossVal_Example/HillDipt.csv")
glimpse(HillDipt)
glimpse(HillDipt)
unique(HillDipt$MountainName)
unique(HillDipt$Elevation)
glimpse(HillDipt)
unique(HillDipt$MountainName)
unique(HillDipt$Elevation)
glimpse(useDat)
# MODIFY DATA INPUT TO MATCH ACC PRES EXPECTATIONS
useDat <- HillDipt %>%
mutate(CompartmentName = MountainName,TransectNo = Elevation)
glimpse(useDat)
# MODIFY DATA INPUT TO MATCH ACC PRES EXPECTATIONS
useDat <- HillDipt %>%
rename(CompartmentName = MountainName,TransectNo = Elevation)
glimpse(useDat)
glimpse(useDat)
names(useDat)
# ---------------------------------------
# Use the function on the  data frame to retrieve
# a table of Precision and MAE estimates
# This will take ~ 30 seconds
# it will print some errors too...
# MODIFY DATA INPUT TO MATCH ACC PRES EXPECTATIONS
useDat <- HillDipt %>%
rename(CompartmentName = MountainName,TransectNo = Elevation) %>%
select(CompartmentName, TransectNo, Sp.01:Sp.28)
glimpse(useDat)
names(useDat)
# ---------------------------------------
# Use the function on the  data frame to retrieve
# a table of Precision and MAE estimates
# This will take ~ 30 seconds
# it will print some errors too...
wrk<-mutate(useDat, Comp_Trans = unite(CompartmentName,TransectNo, sep = ":"))
wrk <- wrk %>% select(Comp_Trans, starts_with("Sp."))
?unite
wrk<-unite(useDat, col = Comp_Trans, CompartmentName,TransectNo, sep = ":")
wrk <- wrk %>% select(Comp_Trans, starts_with("Sp."))
head(wrk)
Trans<-wrk %>%
# select(36,9:35) %>% # no vis count
group_by(Comp_Trans) %>%
summarise_all(funs(sum), na.rm = TRUE) # adds up all transects within compartment - date
Trans
AllData <- Trans %>% select(-Comp_Trans) %>%
summarise_all(funs(sum)) %>%
as.numeric()
AllData
Master <- iNEXT(AllData)
Master <- iNEXT(AllData)
plot(Master)
AccPres(useDat)
traceback()
length(unique(Trans$Comp_Trans))
distinct(Trans, Comp_Trans)
distinct(Trans, Comp_Trans) %>% n()
distinct(Trans, Comp_Trans) %>% n(.)
distinct(Trans, Comp_Trans) %>% length()
CrossV<-data.frame(matrix(NA, iterations, 11))
names(CrossV)<-c("LeftOut","NumObs","ObsSR","Obs_Shan", "Obs_Simp",
"SR_at_Val","SR_at_val_AbsDiff",
"Shan_at_Val", "Shan_at_Val_AbsDiff",
"Simp_at_Val", "Simp_at_Val_AbsDiff")
CrossV<-data.frame(matrix(NA, iterations, 11))
# number of transects
iterations<-length(unique(Trans$Comp_Trans))
CrossV<-data.frame(matrix(NA, iterations, 11))
names(CrossV)<-c("LeftOut","NumObs","ObsSR","Obs_Shan", "Obs_Simp",
"SR_at_Val","SR_at_val_AbsDiff",
"Shan_at_Val", "Shan_at_Val_AbsDiff",
"Simp_at_Val", "Simp_at_Val_AbsDiff")
i=1
cat(paste(i,"._.", sep = ""))
Out_Trans <- slice(Trans, i) # left out transect
Out_Trans
In_Trans <- slice(Trans, -i) # all other transects
In_Trans
Out_Obs <- select(Out_Trans, -1) %>% rowSums() # total number of observations in left out
Out_SR <- sum(Out_Trans[,-1]>0) # total number of species in left out
Out_Div <- Out_Trans %>% select(-1) %>% as.numeric() # make the observations numeric
Out_Div <- Out_Div[Out_Div>0] # simplify to length = species richness (all>0)
if(sum(Out_Div>0)>1){
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Out_Shan <- ChaoShannon(Out_Div)$Estimator
} else
{
Out_Simp <- sum(Out_Div>0)
Out_Shan <- sum(Out_Div>0)
}
# Fit the model to the data missing the one left out
JackTrans<-data.frame(t(as.matrix(In_Trans[,-1])))
names(JackTrans)<-as.character(In_Trans$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
# 80 ensure we get the points around the m values we need to match
# the left out one to an estimate.
# specify q = 0,1,2 to get SR, Shan and Simpson diversity estimates
Jack_Result<-iNEXT(JackTrans_use, q=c(0,1,2), knots = 100)
Jack_Result
# isolate the SR, Shan and Simp informations
JackOutSR <- filter(Jack_Result$iNextEst, order == 0)
JackOutShan <- filter(Jack_Result$iNextEst, order == 1)
JackOutSimp <- filter(Jack_Result$iNextEst, order == 2)
if(Out_Obs>0&Out_SR>=1){
SR_at_Val <- filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct()
Shan_at_Val <- filter(JackOutShan, m == Out_Obs) %>% select(qD) %>% distinct()
Simp_at_Val <- filter(JackOutSimp, m == Out_Obs) %>% select(qD) %>% distinct()
} else {
SR_at_Val <- ifelse(Out_SR == 1, filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct(), NA)
Shan_at_Val <- NA
Simp_at_Val <- NA
}
if(Out_SR>=1){
SR_AbsDiff <- abs(SR_at_Val - Out_SR)
} else
{SR_AbsDiff = NA}
# Shannon Diversity: get the estimate of Shannon at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Shannon
# Shan_AbsDiff is NA if there are < 2 species
if(Out_SR <= 1){
Shan_AbsDiff <- NA
} else {
Out_Shan <- ChaoShannon(Out_Div)$Estimator
Shan_AbsDiff <- abs(Shan_at_Val - Out_Shan)
}
# Simpson Diversity: get the estimate of Simpson at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Simpson
# Simp_AbsDiff is NA if there are < 2 species
if(Out_SR <=1){
Simp_AbsDiff <- NA
} else {
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Simp_AbsDiff <- abs(Simp_at_Val - Out_Simp)
}
# collect and add to collector bin
CrossV[i,]<-c(
# transect out
as.character(Trans$Comp_Trans[i]),
# observation in left out
Out_Obs,
# SR in Left Out
Out_SR,
# Shannon in left out
Out_Shan,
# Simpson in left out
Out_Simp,
# Estimated SR from rest of transects, at Observations from left out transect
SR_at_Val,
SR_AbsDiff,
# Estimated Shannon from rest of transects, at Observations from left out transect
Shan_at_Val,
# Shannon Div differnce
Shan_AbsDiff,
# Estimated Simpson from rest of transects, at Observations from left out transect
Simp_at_Val,
# Simpson Div difference
Simp_AbsDiff
)
ls()
CrossV
source('Nada_Function_MAD.R')
HillDipt <- read.csv("./CrossVal_Example/HillDipt.csv")
glimpse(HillDipt)
unique(HillDipt$MountainName)
unique(HillDipt$Elevation)
# MODIFY DATA INPUT TO MATCH ACC PRES EXPECTATIONS
useDat <- HillDipt %>%
rename(CompartmentName = MountainName,TransectNo = Elevation) %>%
select(CompartmentName, TransectNo, Sp.01:Sp.28)
glimpse(useDat)
names(useDat)
AccPres(useDat)
names(useDat)
data <- useDat
unite(data, col = Comp_Trans,
CompartmentName, TransectNo,
sep = ":")
# create unique identifier of transect
wrk <- unite(data, col = Comp_Trans,
CompartmentName, TransectNo,
sep = ":")
wrk <- select(Comp_Trans, starts_with("Sp."))
# create unique identifier of transect
wrk <- unite(data, col = Comp_Trans,
CompartmentName, TransectNo,
sep = ":") %>%
select(Comp_Trans, starts_with("Sp."))
source('Nada_Function_MAD.R')
AccPres(useDat)
## Import Data -----------------------------
# These are defined by forest types
impData <- read.csv("./CrossVal_Example/HillDipt.csv")
library(tidyverse)
library(iNEXT)
source('Nada_Function_MAD.R')
## Import Data -----------------------------
# These are defined by forest types
impData <- read.csv("./CrossVal_Example/HillDipt.csv")
# check it through
glimpse(impData)
names(useDat)
glimpse(useDat)
# MODIFY DATA INPUT TO MATCH ACC PRES EXPECTATIONS
# renaming mountain to compartment and elevation to transect
# grabbing only the columns needed
useDat <- impData %>%
rename(CompartmentName = MountainName,TransectNo = Elevation) %>%
select(CompartmentName, TransectNo, contains("Sp."))
glimpse(useDat)
names(useDat)
AccPres(useDat)
