# organise the habitat data ----
# some compartments are not represented in the iNEXT data (no species)
habitat2 <- arrange(habitat, Compartment) %>% rename(Site = Compartment)
habitat_use <- filter(habitat2, Site %in% levels(diversity_data_coverage$Site))
names(habitat_use)
df <- data.frame(diversity_data_coverage,
compartment_age = rep(habitat_use$ForestAge, each= 3),
canopy_closure = rep(habitat_use$CanopyClosure, each = 3),
leaf_litter_depth = rep(habitat_use$LeafLitterDepth, each = 3),
understory_height = rep(habitat_use$HerbPlantHeight, each = 3),
No.WaterBodies = rep(habitat_use$No.WaterBodies, each = 3),
WaterDistance = rep(habitat_use$WaterDistance, each = 3)) %>%
rename(coverage = SC) %>%
rename(diversity_estimate = qD)
# quick check
head(df)
# Isolate Species Richness data (order/q = 0)
# temporarily remove Unlogged?  (set at age 0 above)
SR_data <- filter(df, order == 0) %>% filter(compartment_age!='Unlogged') %>%
mutate(compartment_age = as.numeric(as.character(compartment_age)))
SR_unlogged <- filter(df, order == 0) %>% filter(compartment_age =='Unlogged')
Simp_data <- filter(df, order == 2) %>% filter(compartment_age!='Unlogged') %>%
mutate(compartment_age = as.numeric(as.character(compartment_age)))
Simp_unlogged <- filter(df, order == 2) %>% filter(compartment_age =='Unlogged')
head(SR_data)
tail(SR_data)
# fascinating groups....
SR_plot <- ggplot(SR_data, aes(x = compartment_age, y = diversity_estimate))+
geom_point(size = 5)+
geom_text_repel(aes(label=Site), point.padding = 0.5) +
geom_point(data = SR_unlogged, aes(x = 50, y = diversity_estimate), colour = 'red', size = 5)+
labs(x = "Compartment Age (Years Since Last Logging)",
y = "Species Richness Estimate") +
annotate('text', x = 48, y = 3, angle = 90, label = "Unlogged", col = 'red')+
theme_bw()
Simp_plot <- ggplot(Simp_data, aes(x = compartment_age, y = diversity_estimate))+
geom_point(size = 5)+
geom_text_repel(aes(label=Site), point.padding = 0.5) +
geom_point(data = Simp_unlogged, aes(x = 50, y = diversity_estimate), colour = 'red', size = 5)+
labs(x = "Compartment Age (Years Since Last Logging)",
y = "Simpsons Diversity Estimate") +
annotate('text', x = 48, y = 2, angle = 90, label = "Unlogged", col = 'red') +
theme_bw()
grid.arrange(SR_plot, Simp_plot)
# linear model with all terms.  log transforming the Estimator may be justified
mod <- lm((diversity_estimate) ~ compartment_age +
canopy_closure + leaf_litter_depth + understory_height + No.WaterBodies,
data = SR_data)
autoplot(mod, smooth.colour = NA)
# signficnant (almost) age and leaf litter.
# log transformation removes age.
summary(mod)
library(MASS)
stepAIC(mod)
mm<-stepAIC(mod)
summary(mm)
names(SR_data)
?map_at
# habitat plots ----
SR_canopy_closure <- ggplot(SR_data, aes(x = canopy_closure, y = diversity_estimate))+
geom_point(size = 5)+
geom_text_repel(aes(label=Site), point.padding = 0.5) +
labs(x = "Canopy Closure",
y = "Species Richness Estimate") +
theme_bw()
SR_leaf_litter_depth <- ggplot(SR_data, aes(x = leaf_litter_depth, y = diversity_estimate))+
geom_point(size = 5)+
geom_text_repel(aes(label=Site), point.padding = 0.5) +
labs(x = "Leaf Litter Depth",
y = "Species Richness Estimate") +
theme_bw()
SR_understory_height <- ggplot(SR_data, aes(x = understory_height, y = diversity_estimate))+
geom_point(size = 5)+
geom_text_repel(aes(label=Site), point.padding = 0.5) +
labs(x = "Understory Height",
y = "Species Richness Estimate") +
theme_bw()
SR_No.WaterBodies <- ggplot(SR_data, aes(x = No.WaterBodies, y = diversity_estimate))+
geom_point(size = 5)+
geom_text_repel(aes(label=Site), point.padding = 0.5) +
labs(x = "No.WaterBodies",
y = "Species Richness Estimate") +
theme_bw()
grid.arrange(SR_canopy_closure, SR_leaf_litter_depth,
SR_understory_height, SR_No.WaterBodies,
ncol = 2)
SR_data
SR_data
write.csc(SR_data, file = "SR_data_out.csv")
write.csv(SR_data, file = "SR_data_out.csv")
grid.arrange(SR_plot, Simp_plot)
grid.arrange(SR_canopy_closure, SR_leaf_litter_depth,
SR_understory_height, SR_No.WaterBodies,
ncol = 2)
mod_step <- stepAIC(mod)
summary(mod_step)
library(heplots) # effect sizes +
install.packages(heplots)
install.packages('heplots')
library(heplots) # effect sizes +
etasq(mod_step)
etasq(mod_step, anova = TRUE)
etasq(mod, anova = TRUE)
# Use the function
# ---------------------------------------
# setup with libraries
library(tidyverse)
library(iNEXT)
# ---------------------------------------
# source the function
# this grabs the function and loads it into R's brain
# to use.
source('Nada_Function_MAE.R')
Five<-read.csv("CrossVal_Example/FiveYr.csv")
glimpse(Five)
unique(Five$CompartmentName)
# ---------------------------------------
# Use the function on the  data frame to retrieve
# a table of Precision and MAE estimates
# This will take ~ 30 seconds
# it will print some errors too...
AccPres(Five)
ls()
data <- Five
# create unique identifier of transect
wrk<-mutate(data, Comp_Trans = paste(CompartmentName,TransectNo, sep = ":"))
wrk
Trans<-wrk %>%
select(36,9:35) %>% # no vis count
group_by(Comp_Trans) %>%
summarise_all(funs(sum), na.rm = TRUE) # adds up all transects within compartment - date
Trans
Trans %>% select(-Comp_Trans) %>% summarise_all(funs(sum()))
?summarise_all
Trans %>% select(-Comp_Trans)
tt<-Trans %>% select(-Comp_Trans)
summarise_all(tt, sum)
Trans %>% select(-Comp_Trans) %>% summarise_all(funs(sum))
AllData <- Trans %>% select(-Comp_Trans) %>% summarise_all(funs(sum))
Master <- iNEXT(AllData)
Master
Master <- iNEXT(as.data.frame(AllData))
Trans %>% select(-Comp_Trans) %>%
summarise_all(funs(sum)) %>%
as.numeric()
AllData <- Trans %>% select(-Comp_Trans) %>%
summarise_all(funs(sum)) %>%
as.numeric()
Master <- iNEXT(AllData)
Master
Master$AsyEst %>%
as.data.frame %>%
select(Estimator, Est_s.e.) %>%
rename(SE = Est_s.e.)
source('Nada_Function_MAE.R')
AccPres(Five)
# create unique identifier of transect
wrk<-mutate(data, Comp_Trans = paste(CompartmentName,TransectNo, sep = ":"))
Trans<-wrk %>%
select(36,9:35) %>% # no vis count
group_by(Comp_Trans) %>%
summarise_all(funs(sum), na.rm = TRUE) # adds up all transects within compartment - date
AllData <- Trans %>% select(-Comp_Trans) %>%
summarise_all(funs(sum)) %>%
as.numeric()
Master <- iNEXT(AllData)
# number of transects
iterations<-length(unique(Trans$Comp_Trans))
CrossV<-data.frame(matrix(NA, iterations, 11))
names(CrossV)<-c("LeftOut","NumObs","ObsSR","Obs_Shan", "Obs_Simp",
"SR_at_Val","SR_at_val_AbsDiff",
"Shan_at_Val", "Shan_at_Val_AbsDiff",
"Simp_at_Val", "Simp_at_Val_AbsDiff")
i=1
Out_Trans <- slice(Trans, i) # left out transect
In_Trans <- slice(Trans, -i) # all other transects
Out_Obs <- select(Out_Trans, -1) %>% rowSums() # total number of observations in left out
Out_SR <- sum(Out_Trans[,-1]>0) # total number of species in left out
Out_Div <- Out_Trans %>% select(-1) %>% as.numeric() # make the observations numeric
Out_Div <- Out_Div[Out_Div>0] # simplify to length = species richness (all>0)
if(sum(Out_Div>0)>1){
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Out_Shan <- ChaoShannon(Out_Div)$Estimator
} else
{
Out_Simp <- sum(Out_Div>0)
Out_Shan <- sum(Out_Div>0)
}
# Fit the model to the data missing the one left out
JackTrans<-data.frame(t(as.matrix(In_Trans[,-1])))
names(JackTrans)<-as.character(In_Trans$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
# 80 ensure we get the points around the m values we need to match
# the left out one to an estimate.
# specify q = 0,1,2 to get SR, Shan and Simpson diversity estimates
Jack_Result<-iNEXT(JackTrans_use, q=c(0,1,2), knots = 80)
# isolate the SR, Shan and Simp informations
JackOutSR <- filter(Jack_Result$iNextEst, order == 0)
JackOutShan <- filter(Jack_Result$iNextEst, order == 1)
JackOutSimp <- filter(Jack_Result$iNextEst, order == 2)
if(Out_Obs>0&Out_SR>=1){
SR_at_Val <- filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct()
Shan_at_Val <- filter(JackOutShan, m == Out_Obs) %>% select(qD) %>% distinct()
Simp_at_Val <- filter(JackOutSimp, m == Out_Obs) %>% select(qD) %>% distinct()
} else {
SR_at_Val <- ifelse(Out_SR == 1, filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct(), NA)
Shan_at_Val <- NA
Simp_at_Val <- NA
}
if(Out_SR>=1){
SR_AbsDiff <- abs(SR_at_Val - Out_SR)
} else
{SR_AbsDiff = NA}
# Shannon Diversity: get the estimate of Shannon at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Shannon
# Shan_AbsDiff is NA if there are < 2 species
if(Out_SR <= 1){
Shan_AbsDiff <- NA
} else {
Out_Shan <- ChaoShannon(Out_Div)$Estimator
Shan_AbsDiff <- abs(Shan_at_Val - Out_Shan)
}
# Simpson Diversity: get the estimate of Simpson at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Simpson
# Simp_AbsDiff is NA if there are < 2 species
if(Out_SR <=1){
Simp_AbsDiff <- NA
} else {
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Simp_AbsDiff <- abs(Simp_at_Val - Out_Simp)
}
# collect and add to collector bin
CrossV[i,]<-c(
# transect out
as.character(Trans$Comp_Trans[i]),
# observation in left out
Out_Obs,
# SR in Left Out
Out_SR,
# Shannon in left out
Out_Shan,
# Simpson in left out
Out_Simp,
# Estimated SR from rest of transects, at Observations from left out transect
SR_at_Val,
SR_AbsDiff,
# Estimated Shannon from rest of transects, at Observations from left out transect
Shan_at_Val,
# Shannon Div differnce
Shan_AbsDiff,
# Estimated Simpson from rest of transects, at Observations from left out transect
Simp_at_Val,
# Simpson Div difference
Simp_AbsDiff
)
# Run the Cross Validation and Collect stuff
for(i in seq_len(iterations)){
# create the two pieces
# n transects to use, and 1 left out
Out_Trans <- slice(Trans, i) # left out transect
In_Trans <- slice(Trans, -i) # all other transects
# get the Observations, SR for the left out transect
Out_Obs <- select(Out_Trans, -1) %>% rowSums() # total number of observations in left out
Out_SR <- sum(Out_Trans[,-1]>0) # total number of species in left out
# Prep to get the diversity metrics for the left out transect
Out_Div <- Out_Trans %>% select(-1) %>% as.numeric() # make the observations numeric
Out_Div <- Out_Div[Out_Div>0] # simplify to length = species richness (all>0)
# use the Estimators from Chao if diversity >1
# otherwise it will be 0 or 1.
if(sum(Out_Div>0)>1){
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Out_Shan <- ChaoShannon(Out_Div)$Estimator
} else
{
Out_Simp <- sum(Out_Div>0)
Out_Shan <- sum(Out_Div>0)
}
# Fit the model to the data missing the one left out
JackTrans<-data.frame(t(as.matrix(In_Trans[,-1])))
names(JackTrans)<-as.character(In_Trans$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
# 80 ensure we get the points around the m values we need to match
# the left out one to an estimate.
# specify q = 0,1,2 to get SR, Shan and Simpson diversity estimates
Jack_Result<-iNEXT(JackTrans_use, q=c(0,1,2), knots = 80)
# isolate the SR, Shan and Simp informations
JackOutSR <- filter(Jack_Result$iNextEst, order == 0)
JackOutShan <- filter(Jack_Result$iNextEst, order == 1)
JackOutSimp <- filter(Jack_Result$iNextEst, order == 2)
# AbsDiffs: absolute value of difference between estimate and left out
# Estimates at Observation number from left out transect
# if Out_Obs>0 and Out_SR >= 1  (2+ species), find SR, Shan and Simp at Obs Number;
# otherwise find SR ar Obs Number of SR = 1, and set Shan/Simp to NA,
# or set all to NA if empty transect
if(Out_Obs>0&Out_SR>=1){
SR_at_Val <- filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct()
Shan_at_Val <- filter(JackOutShan, m == Out_Obs) %>% select(qD) %>% distinct()
Simp_at_Val <- filter(JackOutSimp, m == Out_Obs) %>% select(qD) %>% distinct()
} else {
SR_at_Val <- ifelse(Out_SR == 1, filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct(), NA)
Shan_at_Val <- NA
Simp_at_Val <- NA
}
# Absolute Differences
# Species Richness: get the estimate of SR at the number of observations
# in the left out transect (Obs_Out) and subtract it from the Observed SR.
# SR_AbsDiff is NA if SR in left out transect is 0.
if(Out_SR>=1){
SR_AbsDiff <- abs(SR_at_Val - Out_SR)
} else
{SR_AbsDiff = NA}
# Shannon Diversity: get the estimate of Shannon at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Shannon
# Shan_AbsDiff is NA if there are < 2 species
if(Out_SR <= 1){
Shan_AbsDiff <- NA
} else {
Out_Shan <- ChaoShannon(Out_Div)$Estimator
Shan_AbsDiff <- abs(Shan_at_Val - Out_Shan)
}
# Simpson Diversity: get the estimate of Simpson at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Simpson
# Simp_AbsDiff is NA if there are < 2 species
if(Out_SR <=1){
Simp_AbsDiff <- NA
} else {
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Simp_AbsDiff <- abs(Simp_at_Val - Out_Simp)
}
# collect and add to collector bin
CrossV[i,]<-c(
# transect out
as.character(Trans$Comp_Trans[i]),
# observation in left out
Out_Obs,
# SR in Left Out
Out_SR,
# Shannon in left out
Out_Shan,
# Simpson in left out
Out_Simp,
# Estimated SR from rest of transects, at Observations from left out transect
SR_at_Val,
SR_AbsDiff,
# Estimated Shannon from rest of transects, at Observations from left out transect
Shan_at_Val,
# Shannon Div differnce
Shan_AbsDiff,
# Estimated Simpson from rest of transects, at Observations from left out transect
Simp_at_Val,
# Simpson Div difference
Simp_AbsDiff
)
}
wrk<-mutate(data, Comp_Trans = paste(CompartmentName,TransectNo, sep = ":"))
Trans<-wrk %>%
select(36,9:35) %>% # no vis count
group_by(Comp_Trans) %>%
summarise_all(funs(sum), na.rm = TRUE) # adds up all transects within compartment - date
AllData <- Trans %>% select(-Comp_Trans) %>%
summarise_all(funs(sum)) %>%
as.numeric()
Master <- iNEXT(AllData)
# view it
# Trans
#==========================================================
# Cross Validation
#==========================================================
# number of transects
iterations<-length(unique(Trans$Comp_Trans))
# set up a collection bin
# the SR_at_Val are the values estimated AT the number of observations
# of the left out transect
CrossV<-data.frame(matrix(NA, iterations, 11))
names(CrossV)<-c("LeftOut","NumObs","ObsSR","Obs_Shan", "Obs_Simp",
"SR_at_Val","SR_at_val_AbsDiff",
"Shan_at_Val", "Shan_at_Val_AbsDiff",
"Simp_at_Val", "Simp_at_Val_AbsDiff")
# Run the Cross Validation and Collect stuff
for(i in seq_len(iterations)){
# create the two pieces
# n transects to use, and 1 left out
Out_Trans <- slice(Trans, i) # left out transect
In_Trans <- slice(Trans, -i) # all other transects
# get the Observations, SR for the left out transect
Out_Obs <- select(Out_Trans, -1) %>% rowSums() # total number of observations in left out
Out_SR <- sum(Out_Trans[,-1]>0) # total number of species in left out
# Prep to get the diversity metrics for the left out transect
Out_Div <- Out_Trans %>% select(-1) %>% as.numeric() # make the observations numeric
Out_Div <- Out_Div[Out_Div>0] # simplify to length = species richness (all>0)
# use the Estimators from Chao if diversity >1
# otherwise it will be 0 or 1.
if(sum(Out_Div>0)>1){
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Out_Shan <- ChaoShannon(Out_Div)$Estimator
} else
{
Out_Simp <- sum(Out_Div>0)
Out_Shan <- sum(Out_Div>0)
}
# Fit the model to the data missing the one left out
JackTrans<-data.frame(t(as.matrix(In_Trans[,-1])))
names(JackTrans)<-as.character(In_Trans$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
# 80 ensure we get the points around the m values we need to match
# the left out one to an estimate.
# specify q = 0,1,2 to get SR, Shan and Simpson diversity estimates
Jack_Result<-iNEXT(JackTrans_use, q=c(0,1,2), knots = 80)
# isolate the SR, Shan and Simp informations
JackOutSR <- filter(Jack_Result$iNextEst, order == 0)
JackOutShan <- filter(Jack_Result$iNextEst, order == 1)
JackOutSimp <- filter(Jack_Result$iNextEst, order == 2)
# AbsDiffs: absolute value of difference between estimate and left out
# Estimates at Observation number from left out transect
# if Out_Obs>0 and Out_SR >= 1  (2+ species), find SR, Shan and Simp at Obs Number;
# otherwise find SR ar Obs Number of SR = 1, and set Shan/Simp to NA,
# or set all to NA if empty transect
if(Out_Obs>0&Out_SR>=1){
SR_at_Val <- filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct()
Shan_at_Val <- filter(JackOutShan, m == Out_Obs) %>% select(qD) %>% distinct()
Simp_at_Val <- filter(JackOutSimp, m == Out_Obs) %>% select(qD) %>% distinct()
} else {
SR_at_Val <- ifelse(Out_SR == 1, filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct(), NA)
Shan_at_Val <- NA
Simp_at_Val <- NA
}
# Absolute Differences
# Species Richness: get the estimate of SR at the number of observations
# in the left out transect (Obs_Out) and subtract it from the Observed SR.
# SR_AbsDiff is NA if SR in left out transect is 0.
if(Out_SR>=1){
SR_AbsDiff <- abs(SR_at_Val - Out_SR)
} else
{SR_AbsDiff = NA}
# Shannon Diversity: get the estimate of Shannon at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Shannon
# Shan_AbsDiff is NA if there are < 2 species
if(Out_SR <= 1){
Shan_AbsDiff <- NA
} else {
Out_Shan <- ChaoShannon(Out_Div)$Estimator
Shan_AbsDiff <- abs(Shan_at_Val - Out_Shan)
}
# Simpson Diversity: get the estimate of Simpson at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Simpson
# Simp_AbsDiff is NA if there are < 2 species
if(Out_SR <=1){
Simp_AbsDiff <- NA
} else {
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Simp_AbsDiff <- abs(Simp_at_Val - Out_Simp)
}
# collect and add to collector bin
CrossV[i,]<-c(
# transect out
as.character(Trans$Comp_Trans[i]),
# observation in left out
Out_Obs,
# SR in Left Out
Out_SR,
# Shannon in left out
Out_Shan,
# Simpson in left out
Out_Simp,
# Estimated SR from rest of transects, at Observations from left out transect
SR_at_Val,
SR_AbsDiff,
# Estimated Shannon from rest of transects, at Observations from left out transect
Shan_at_Val,
# Shannon Div differnce
Shan_AbsDiff,
# Estimated Simpson from rest of transects, at Observations from left out transect
Simp_at_Val,
# Simpson Div difference
Simp_AbsDiff
)
}
CrossV
# ----------------------------------------------------------------
# this is the 'ACCURACY' stat - Mean Absolute Error
# sum the absolute differences and divide by the number of non-NA
# ----------------------------------------------------------------
MAE <- CrossV %>%
select(SR_at_val_AbsDiff, Shan_at_Val_AbsDiff, Simp_at_Val_AbsDiff) %>%
mutate_all(funs(as.numeric)) %>%
summarise_all(.funs = function(x) mean(x, na.rm = TRUE)) %>%
gather(DiversityMetric, MAE)
# this is the number of transects/plots with NO fireflies sampled
SampleSize <- CrossV %>%
select(SR_at_val_AbsDiff, Shan_at_Val_AbsDiff, Simp_at_Val_AbsDiff) %>%
mutate_all(funs(as.numeric)) %>%
summarise_all(.funs = function(x) sum(!is.na(x))) %>%
gather(DiversityMetric, SS)
Precisions <- Master$AsyEst %>%
as.data.frame %>%
select(Estimator, Est_s.e.) %>%
rename(SE = Est_s.e.)
cat("SampleSize_MAE is the number of transects with estimates of SR > 1", "/n")
cat("and SR>=2 for Shannon and Simpson")
return(data.frame(Precisions, MAE = MAE$MAE, SampleSize_MAE = SampleSize$SS))
data.frame(Precisions, MAE = MAE$MAE, SampleSize_MAE = SampleSize$SS)
AccPres(Five)
source('Nada_Function_MAE.R')
AccPres(Five)
?cat
source('Nada_Function_MAE.R')
source('Nada_Function_MAE.R')
Five<-read.csv("CrossVal_Example/FiveYr.csv")
AccPres(Five)
source('Nada_Function_MAE.R')
Five<-read.csv("CrossVal_Example/FiveYr.csv")
AccPres(Five)
