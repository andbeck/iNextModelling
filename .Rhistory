wrk<-mutate(data, Comp_Trans = paste(CompartmentName,TransectNo, sep = ":"))
Trans<-wrk %>%
select(36,9:35) %>% # no vis count
group_by(Comp_Trans) %>%
summarise_all(funs(sum), na.rm = TRUE) # adds up all transects within compartment - date
AllData <- Trans %>% select(-Comp_Trans) %>%
summarise_all(funs(sum)) %>%
as.numeric()
Master <- iNEXT(AllData)
# number of transects
iterations<-length(unique(Trans$Comp_Trans))
CrossV<-data.frame(matrix(NA, iterations, 11))
names(CrossV)<-c("LeftOut","NumObs","ObsSR","Obs_Shan", "Obs_Simp",
"SR_at_Val","SR_at_val_AbsDiff",
"Shan_at_Val", "Shan_at_Val_AbsDiff",
"Simp_at_Val", "Simp_at_Val_AbsDiff")
i=1
Out_Trans <- slice(Trans, i) # left out transect
In_Trans <- slice(Trans, -i) # all other transects
Out_Obs <- select(Out_Trans, -1) %>% rowSums() # total number of observations in left out
Out_SR <- sum(Out_Trans[,-1]>0) # total number of species in left out
Out_Div <- Out_Trans %>% select(-1) %>% as.numeric() # make the observations numeric
Out_Div <- Out_Div[Out_Div>0] # simplify to length = species richness (all>0)
if(sum(Out_Div>0)>1){
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Out_Shan <- ChaoShannon(Out_Div)$Estimator
} else
{
Out_Simp <- sum(Out_Div>0)
Out_Shan <- sum(Out_Div>0)
}
# Fit the model to the data missing the one left out
JackTrans<-data.frame(t(as.matrix(In_Trans[,-1])))
names(JackTrans)<-as.character(In_Trans$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
# 80 ensure we get the points around the m values we need to match
# the left out one to an estimate.
# specify q = 0,1,2 to get SR, Shan and Simpson diversity estimates
Jack_Result<-iNEXT(JackTrans_use, q=c(0,1,2), knots = 80)
# isolate the SR, Shan and Simp informations
JackOutSR <- filter(Jack_Result$iNextEst, order == 0)
JackOutShan <- filter(Jack_Result$iNextEst, order == 1)
JackOutSimp <- filter(Jack_Result$iNextEst, order == 2)
if(Out_Obs>0&Out_SR>=1){
SR_at_Val <- filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct()
Shan_at_Val <- filter(JackOutShan, m == Out_Obs) %>% select(qD) %>% distinct()
Simp_at_Val <- filter(JackOutSimp, m == Out_Obs) %>% select(qD) %>% distinct()
} else {
SR_at_Val <- ifelse(Out_SR == 1, filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct(), NA)
Shan_at_Val <- NA
Simp_at_Val <- NA
}
if(Out_SR>=1){
SR_AbsDiff <- abs(SR_at_Val - Out_SR)
} else
{SR_AbsDiff = NA}
# Shannon Diversity: get the estimate of Shannon at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Shannon
# Shan_AbsDiff is NA if there are < 2 species
if(Out_SR <= 1){
Shan_AbsDiff <- NA
} else {
Out_Shan <- ChaoShannon(Out_Div)$Estimator
Shan_AbsDiff <- abs(Shan_at_Val - Out_Shan)
}
# Simpson Diversity: get the estimate of Simpson at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Simpson
# Simp_AbsDiff is NA if there are < 2 species
if(Out_SR <=1){
Simp_AbsDiff <- NA
} else {
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Simp_AbsDiff <- abs(Simp_at_Val - Out_Simp)
}
# collect and add to collector bin
CrossV[i,]<-c(
# transect out
as.character(Trans$Comp_Trans[i]),
# observation in left out
Out_Obs,
# SR in Left Out
Out_SR,
# Shannon in left out
Out_Shan,
# Simpson in left out
Out_Simp,
# Estimated SR from rest of transects, at Observations from left out transect
SR_at_Val,
SR_AbsDiff,
# Estimated Shannon from rest of transects, at Observations from left out transect
Shan_at_Val,
# Shannon Div differnce
Shan_AbsDiff,
# Estimated Simpson from rest of transects, at Observations from left out transect
Simp_at_Val,
# Simpson Div difference
Simp_AbsDiff
)
# Run the Cross Validation and Collect stuff
for(i in seq_len(iterations)){
# create the two pieces
# n transects to use, and 1 left out
Out_Trans <- slice(Trans, i) # left out transect
In_Trans <- slice(Trans, -i) # all other transects
# get the Observations, SR for the left out transect
Out_Obs <- select(Out_Trans, -1) %>% rowSums() # total number of observations in left out
Out_SR <- sum(Out_Trans[,-1]>0) # total number of species in left out
# Prep to get the diversity metrics for the left out transect
Out_Div <- Out_Trans %>% select(-1) %>% as.numeric() # make the observations numeric
Out_Div <- Out_Div[Out_Div>0] # simplify to length = species richness (all>0)
# use the Estimators from Chao if diversity >1
# otherwise it will be 0 or 1.
if(sum(Out_Div>0)>1){
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Out_Shan <- ChaoShannon(Out_Div)$Estimator
} else
{
Out_Simp <- sum(Out_Div>0)
Out_Shan <- sum(Out_Div>0)
}
# Fit the model to the data missing the one left out
JackTrans<-data.frame(t(as.matrix(In_Trans[,-1])))
names(JackTrans)<-as.character(In_Trans$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
# 80 ensure we get the points around the m values we need to match
# the left out one to an estimate.
# specify q = 0,1,2 to get SR, Shan and Simpson diversity estimates
Jack_Result<-iNEXT(JackTrans_use, q=c(0,1,2), knots = 80)
# isolate the SR, Shan and Simp informations
JackOutSR <- filter(Jack_Result$iNextEst, order == 0)
JackOutShan <- filter(Jack_Result$iNextEst, order == 1)
JackOutSimp <- filter(Jack_Result$iNextEst, order == 2)
# AbsDiffs: absolute value of difference between estimate and left out
# Estimates at Observation number from left out transect
# if Out_Obs>0 and Out_SR >= 1  (2+ species), find SR, Shan and Simp at Obs Number;
# otherwise find SR ar Obs Number of SR = 1, and set Shan/Simp to NA,
# or set all to NA if empty transect
if(Out_Obs>0&Out_SR>=1){
SR_at_Val <- filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct()
Shan_at_Val <- filter(JackOutShan, m == Out_Obs) %>% select(qD) %>% distinct()
Simp_at_Val <- filter(JackOutSimp, m == Out_Obs) %>% select(qD) %>% distinct()
} else {
SR_at_Val <- ifelse(Out_SR == 1, filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct(), NA)
Shan_at_Val <- NA
Simp_at_Val <- NA
}
# Absolute Differences
# Species Richness: get the estimate of SR at the number of observations
# in the left out transect (Obs_Out) and subtract it from the Observed SR.
# SR_AbsDiff is NA if SR in left out transect is 0.
if(Out_SR>=1){
SR_AbsDiff <- abs(SR_at_Val - Out_SR)
} else
{SR_AbsDiff = NA}
# Shannon Diversity: get the estimate of Shannon at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Shannon
# Shan_AbsDiff is NA if there are < 2 species
if(Out_SR <= 1){
Shan_AbsDiff <- NA
} else {
Out_Shan <- ChaoShannon(Out_Div)$Estimator
Shan_AbsDiff <- abs(Shan_at_Val - Out_Shan)
}
# Simpson Diversity: get the estimate of Simpson at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Simpson
# Simp_AbsDiff is NA if there are < 2 species
if(Out_SR <=1){
Simp_AbsDiff <- NA
} else {
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Simp_AbsDiff <- abs(Simp_at_Val - Out_Simp)
}
# collect and add to collector bin
CrossV[i,]<-c(
# transect out
as.character(Trans$Comp_Trans[i]),
# observation in left out
Out_Obs,
# SR in Left Out
Out_SR,
# Shannon in left out
Out_Shan,
# Simpson in left out
Out_Simp,
# Estimated SR from rest of transects, at Observations from left out transect
SR_at_Val,
SR_AbsDiff,
# Estimated Shannon from rest of transects, at Observations from left out transect
Shan_at_Val,
# Shannon Div differnce
Shan_AbsDiff,
# Estimated Simpson from rest of transects, at Observations from left out transect
Simp_at_Val,
# Simpson Div difference
Simp_AbsDiff
)
}
wrk<-mutate(data, Comp_Trans = paste(CompartmentName,TransectNo, sep = ":"))
Trans<-wrk %>%
select(36,9:35) %>% # no vis count
group_by(Comp_Trans) %>%
summarise_all(funs(sum), na.rm = TRUE) # adds up all transects within compartment - date
AllData <- Trans %>% select(-Comp_Trans) %>%
summarise_all(funs(sum)) %>%
as.numeric()
Master <- iNEXT(AllData)
# view it
# Trans
#==========================================================
# Cross Validation
#==========================================================
# number of transects
iterations<-length(unique(Trans$Comp_Trans))
# set up a collection bin
# the SR_at_Val are the values estimated AT the number of observations
# of the left out transect
CrossV<-data.frame(matrix(NA, iterations, 11))
names(CrossV)<-c("LeftOut","NumObs","ObsSR","Obs_Shan", "Obs_Simp",
"SR_at_Val","SR_at_val_AbsDiff",
"Shan_at_Val", "Shan_at_Val_AbsDiff",
"Simp_at_Val", "Simp_at_Val_AbsDiff")
# Run the Cross Validation and Collect stuff
for(i in seq_len(iterations)){
# create the two pieces
# n transects to use, and 1 left out
Out_Trans <- slice(Trans, i) # left out transect
In_Trans <- slice(Trans, -i) # all other transects
# get the Observations, SR for the left out transect
Out_Obs <- select(Out_Trans, -1) %>% rowSums() # total number of observations in left out
Out_SR <- sum(Out_Trans[,-1]>0) # total number of species in left out
# Prep to get the diversity metrics for the left out transect
Out_Div <- Out_Trans %>% select(-1) %>% as.numeric() # make the observations numeric
Out_Div <- Out_Div[Out_Div>0] # simplify to length = species richness (all>0)
# use the Estimators from Chao if diversity >1
# otherwise it will be 0 or 1.
if(sum(Out_Div>0)>1){
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Out_Shan <- ChaoShannon(Out_Div)$Estimator
} else
{
Out_Simp <- sum(Out_Div>0)
Out_Shan <- sum(Out_Div>0)
}
# Fit the model to the data missing the one left out
JackTrans<-data.frame(t(as.matrix(In_Trans[,-1])))
names(JackTrans)<-as.character(In_Trans$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
# 80 ensure we get the points around the m values we need to match
# the left out one to an estimate.
# specify q = 0,1,2 to get SR, Shan and Simpson diversity estimates
Jack_Result<-iNEXT(JackTrans_use, q=c(0,1,2), knots = 80)
# isolate the SR, Shan and Simp informations
JackOutSR <- filter(Jack_Result$iNextEst, order == 0)
JackOutShan <- filter(Jack_Result$iNextEst, order == 1)
JackOutSimp <- filter(Jack_Result$iNextEst, order == 2)
# AbsDiffs: absolute value of difference between estimate and left out
# Estimates at Observation number from left out transect
# if Out_Obs>0 and Out_SR >= 1  (2+ species), find SR, Shan and Simp at Obs Number;
# otherwise find SR ar Obs Number of SR = 1, and set Shan/Simp to NA,
# or set all to NA if empty transect
if(Out_Obs>0&Out_SR>=1){
SR_at_Val <- filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct()
Shan_at_Val <- filter(JackOutShan, m == Out_Obs) %>% select(qD) %>% distinct()
Simp_at_Val <- filter(JackOutSimp, m == Out_Obs) %>% select(qD) %>% distinct()
} else {
SR_at_Val <- ifelse(Out_SR == 1, filter(JackOutSR, m == Out_Obs) %>% select(qD) %>% distinct(), NA)
Shan_at_Val <- NA
Simp_at_Val <- NA
}
# Absolute Differences
# Species Richness: get the estimate of SR at the number of observations
# in the left out transect (Obs_Out) and subtract it from the Observed SR.
# SR_AbsDiff is NA if SR in left out transect is 0.
if(Out_SR>=1){
SR_AbsDiff <- abs(SR_at_Val - Out_SR)
} else
{SR_AbsDiff = NA}
# Shannon Diversity: get the estimate of Shannon at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Shannon
# Shan_AbsDiff is NA if there are < 2 species
if(Out_SR <= 1){
Shan_AbsDiff <- NA
} else {
Out_Shan <- ChaoShannon(Out_Div)$Estimator
Shan_AbsDiff <- abs(Shan_at_Val - Out_Shan)
}
# Simpson Diversity: get the estimate of Simpson at the number of observations
# in the left out transect (Obs_Out) and subtract from Observerd Simpson
# Simp_AbsDiff is NA if there are < 2 species
if(Out_SR <=1){
Simp_AbsDiff <- NA
} else {
Out_Simp <- ChaoSimpson(Out_Div)$Estimator
Simp_AbsDiff <- abs(Simp_at_Val - Out_Simp)
}
# collect and add to collector bin
CrossV[i,]<-c(
# transect out
as.character(Trans$Comp_Trans[i]),
# observation in left out
Out_Obs,
# SR in Left Out
Out_SR,
# Shannon in left out
Out_Shan,
# Simpson in left out
Out_Simp,
# Estimated SR from rest of transects, at Observations from left out transect
SR_at_Val,
SR_AbsDiff,
# Estimated Shannon from rest of transects, at Observations from left out transect
Shan_at_Val,
# Shannon Div differnce
Shan_AbsDiff,
# Estimated Simpson from rest of transects, at Observations from left out transect
Simp_at_Val,
# Simpson Div difference
Simp_AbsDiff
)
}
CrossV
# ----------------------------------------------------------------
# this is the 'ACCURACY' stat - Mean Absolute Error
# sum the absolute differences and divide by the number of non-NA
# ----------------------------------------------------------------
MAE <- CrossV %>%
select(SR_at_val_AbsDiff, Shan_at_Val_AbsDiff, Simp_at_Val_AbsDiff) %>%
mutate_all(funs(as.numeric)) %>%
summarise_all(.funs = function(x) mean(x, na.rm = TRUE)) %>%
gather(DiversityMetric, MAE)
# this is the number of transects/plots with NO fireflies sampled
SampleSize <- CrossV %>%
select(SR_at_val_AbsDiff, Shan_at_Val_AbsDiff, Simp_at_Val_AbsDiff) %>%
mutate_all(funs(as.numeric)) %>%
summarise_all(.funs = function(x) sum(!is.na(x))) %>%
gather(DiversityMetric, SS)
Precisions <- Master$AsyEst %>%
as.data.frame %>%
select(Estimator, Est_s.e.) %>%
rename(SE = Est_s.e.)
cat("SampleSize_MAE is the number of transects with estimates of SR > 1", "/n")
cat("and SR>=2 for Shannon and Simpson")
return(data.frame(Precisions, MAE = MAE$MAE, SampleSize_MAE = SampleSize$SS))
data.frame(Precisions, MAE = MAE$MAE, SampleSize_MAE = SampleSize$SS)
AccPres(Five)
source('Nada_Function_MAE.R')
AccPres(Five)
?cat
source('Nada_Function_MAE.R')
source('Nada_Function_MAE.R')
Five<-read.csv("CrossVal_Example/FiveYr.csv")
AccPres(Five)
source('Nada_Function_MAE.R')
Five<-read.csv("CrossVal_Example/FiveYr.csv")
AccPres(Five)
TwFivePlus <- read.csv("./CrossVal_Example/More25Year.csv")
source('Nada_Function_MAE.R')
glimpse(TwFivePlus)
unique(TwFivePlus$CompartmentName)
AccPres(TwFivePlus)
library(tidyverse)
library(iNEXT)
# source the function
# this grabs the function and loads it into R's brain
# to use.
source('Nada_Function_MAE.R')
# ---------------------------------------
# get the data
# you can get all of them if you want
# just give them each a name
# IGNORE THIS: Five<-read.csv("CrossVal_Example/FiveYr.csv")
Five<-read.csv("FiveYr.csv")
TwFivePlus <- read.csv("./CrossVal_Example/More25Year.csv")
# quick look at them
glimpse(Five)
unique(Five$CompartmentName)
glimpse(TwFivePlus)
unique(TwFivePlus$CompartmentName)
# ---------------------------------------
# Use the function on the  data frame to retrieve
# a table of Precision and MAE estimates
# This will take ~ 30 seconds
# it will print some errors too...
AccPres(TwFivePlus)
cat(paste(i,"_"))
i=1
cat(paste(i,"_"))
cat(paste(i,"_", sep = ""))
cat(paste(i,"._.", sep = ""))
Five<-mutate(TwFivePlus, Comp_Trans = with(Five, paste(CompartmentName,TransectNo, sep = ":")))
names(Five)
Five<-mutate(TwFivePlus, Comp_Trans = with(TwFivePlus, paste(CompartmentName,TransectNo, sep = ":")))
names(Five)
out<-Five %>%
select(36,9:35) %>% # no vis count
group_by(Comp_Trans) %>%
summarise_all(funs(sum), na.rm = TRUE) # adds up all transects withing compartment - date
out
# Run iNEXT on all of the data for this forest type
AllTrans<-data.frame(t(as.matrix(out[,-1])))
names(AllTrans)<-as.character(out$Comp_Trans)
AllTrans_use <- rowSums(AllTrans)
Master<-iNEXT(AllTrans_use)
plot(Master)
# collect some information
MasterDat<-data.frame(NumObs = Master$DataInfo[,2], t(data.frame(Master$AsyEst[1,])))
# number of transects
iterations<-length(unique(out$Comp_Trans))
# set up a collection bin
CrossV<-data.frame(matrix(NA, iterations, 6))
names(CrossV)<-c("LeftOut","NumObs","ObsSR","AsymEstSR", "AsymEstSR_SE","AbsDiff")
# Run the Cross Validation and Collect stuff
for(i in 1:iterations){
# create the two pieces
# 31 transect to use, and 1 left out
TransUse<-slice(out, -i)
TransOut<-slice(out, i)
# get the Obs and SR for the left out transect
Obs_Out<-rowSums(TransOut[,-1])
SR_Out<-sum(TransOut[,-1]>0)
# Fit the model to the Rest
JackTrans<-data.frame(t(as.matrix(TransUse[,-1])))
names(JackTrans)<-as.character(TransUse$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
JackOut<-iNEXT(JackTrans_use, knots = 80) # 80 ensure we get the points
# AbsDiff: absolute value of difference between estimate and left out
if(Obs_Out>0){
AbsDiff = abs(filter(JackOut$iNextEst, m == Obs_Out)$qD - SR_Out)
} else
{AbsDiff = NA}
# collect and add to collector bin
CrossV[i,]<-c(
as.character(out$Comp_Trans[i]),
JackOut$DataInfo[,2],
JackOut$AsyEst[1,1],
JackOut$AsyEst[1,2],
JackOut$AsyEst[1,3],
AbsDiff
)
}
CrossV
iterations
out$Comp_Trans
i=21
TransUse<-slice(out, -i)
TransOut<-slice(out, i)
Obs_Out<-rowSums(TransOut[,-1])
SR_Out<-sum(TransOut[,-1]>0)
JackTrans<-data.frame(t(as.matrix(TransUse[,-1])))
names(JackTrans)<-as.character(TransUse$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
JackOut<-iNEXT(JackTrans_use, knots = 80) # 80 ensure we get the points
JackOut
if(Obs_Out>0){
AbsDiff = abs(filter(JackOut$iNextEst, m == Obs_Out)$qD - SR_Out)
} else
{AbsDiff = NA}
AbsDiff
Obs_Out
filter(JackOut$iNextEst, m == Obs_Out)
CrossV<-data.frame(matrix(NA, iterations, 6))
names(CrossV)<-c("LeftOut","NumObs","ObsSR","AsymEstSR", "AsymEstSR_SE","AbsDiff")
# Run the Cross Validation and Collect stuff
for(i in 1:iterations){
# create the two pieces
# 31 transect to use, and 1 left out
TransUse<-slice(out, -i)
TransOut<-slice(out, i)
# get the Obs and SR for the left out transect
Obs_Out<-rowSums(TransOut[,-1])
SR_Out<-sum(TransOut[,-1]>0)
# Fit the model to the Rest
JackTrans<-data.frame(t(as.matrix(TransUse[,-1])))
names(JackTrans)<-as.character(TransUse$Comp_Trans)
JackTrans_use <- rowSums(JackTrans)
JackOut<-iNEXT(JackTrans_use, knots = 100) # 80 ensure we get the points
# AbsDiff: absolute value of difference between estimate and left out
if(Obs_Out>0){
AbsDiff = abs(filter(JackOut$iNextEst, m == Obs_Out)$qD - SR_Out)
} else
{AbsDiff = NA}
# collect and add to collector bin
CrossV[i,]<-c(
as.character(out$Comp_Trans[i]),
JackOut$DataInfo[,2],
JackOut$AsyEst[1,1],
JackOut$AsyEst[1,2],
JackOut$AsyEst[1,3],
AbsDiff
)
}
# --------------------------------------------
# This is all of the Cross Validated data
# (make numeric things numeric)
# --------------------------------------------
CrossV <-CrossV %>%
mutate(NumObs = as.numeric(NumObs),
ObsSR = as.numeric(ObsSR),
AsymEstSR = as.numeric(AsymEstSR),
AsymEstSR_SE = as.numeric(AsymEstSR_SE),
AbsDiff = as.numeric(AbsDiff))
CrossV
MAD<-sum(na.omit(CrossV$AbsDiff))/sum(!is.na(CrossV$AbsDiff))
MAD
library(tidyverse)
library(iNEXT)
source('Nada_Function_MAE.R')
source('Nada_Function_MAD.R')
TwFivePlus <- read.csv("./CrossVal_Example/More25Year.csv")
glimpse(TwFivePlus)
unique(TwFivePlus$CompartmentName)
AccPres(TwFivePlus)
