summarise(SR = sum(count)) %>%
# make NA == 0
mutate_all(funs(replace(., is.na(.), 0))) %>%
mutate(index = paste(ForestType,Elevation, sep = ':'))
# get one of the bands
as.data.frame(filter(tidy_iNEXT, Elevation == 200))
unique(tidy_iNEXT$index)
length(unique(tidy_iNEXT$index)))
length(unique(tidy_iNEXT$index))
i = 1
select(as.data.frame(filter_iNext, index = tidy_iNEXT$index[i]), SR)
select(as.data.frame(filter(tidy_iNext, index = tidy_iNEXT$index[i])), SR)
select(as.data.frame(filter(tidy_iNEXT, index = tidy_iNEXT$index[i])), SR)
select(as.data.frame(filter(tidy_iNEXT, index == tidy_iNEXT$index[i])), SR)
elev_input <- list()
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[[i]]<-select(as.data.frame(filter(tidy_iNEXT, index == tidy_iNEXT$index[i])), SR)
}
elev_input
elev_input <- list()
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[[i]]<-select(as.data.frame(filter(tidy_iNEXT, index == tidy_iNEXT$index[i])), SR)
names(elev_input)[[i]]<-tidy_iNEXT$index[i]
}
elev_input
elev_input[[1]]
tidy_iNEXT$index[i])
tidy_iNEXT$index[i]
tidy_iNEXT$index
names(elev_input)<-levels(tidy_iNEXT$index)
elev_input[[1]]
levels(tidy_iNEXT$index)
unique(tidy_iNEXT$index)
names(elev_input)<-unique(tidy_iNEXT$index)
elev_input[[1]]
names(elev_input)
elev_input[1]
iNEXT(elev_input)
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# don't need elev and forest, but good to see
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count)) %>%
# make NA == 0
#mutate_all(funs(replace(., is.na(.), 0))) %>%
mutate(index = paste(ForestType,Elevation, sep = ':'))
# get one of the bands
as.data.frame(filter(tidy_iNEXT, Elevation == 200))
# create list for iNEXT
elev_input <- list()
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[[i]]<-select(as.data.frame(filter(tidy_iNEXT, index == tidy_iNEXT$index[i])), SR)
}
names(elev_input)<-unique(tidy_iNEXT$index)
elev_input[1]
iNEXT(elev_input)
elev_input <- list()
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[[i]]<-na.omit(
select(
as.data.frame(filter(tidy_iNEXT, index == tidy_iNEXT$index[i])), SR))
)
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[[i]]<-na.omit(
select(
as.data.frame(
filter(tidy_iNEXT, index == tidy_iNEXT$index[i])), SR))
}
names(elev_input)<-unique(tidy_iNEXT$index)
elev_input[1]
elev_input
# create list for iNEXT
elev_input <- list()
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[[i]]<-na.omit(
select(
as.data.frame(
filter(tidy_iNEXT, index == tidy_iNEXT$index[i])), SR))
}
elev_input[1]
elev_input[2]
tidy_iNEXT$index
elev_input[[i]]<-na.omit(
select(
as.data.frame(
filter(tidy_iNEXT, index == unique(tidy_iNEXT$index[i]))), SR))
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[[i]]<-na.omit(
select(
as.data.frame(
filter(tidy_iNEXT, index == unique(tidy_iNEXT$index[i]))), SR))
}
names(elev_input)<-unique(tidy_iNEXT$index)
elev_input[1]
elev_input[2]
elev_input
unique(tidy_iNEXT$index[i])
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[[i]]<-na.omit(
select(
as.data.frame(
filter(tidy_iNEXT, index == unique(tidy_iNEXT$index[i]))), SR))}
unique(tidy_iNEXT$index)
elev_input
elev_input[i]<-na.omit(
select(
as.data.frame(
filter(tidy_iNEXT, index == unique(tidy_iNEXT$index[i]))), SR))}
# create list for iNEXT
elev_input <- list()
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[i]<-na.omit(
select(
as.data.frame(
filter(tidy_iNEXT, index == unique(tidy_iNEXT$index[i]))), SR))}
elev_input
# create list for iNEXT
elev_input <- list()
for(i in 1:length(unique(tidy_iNEXT$index))){
elev_input[i]<-na.omit(
select(
filter(tidy_iNEXT,
index == unique(tidy_iNEXT$index[i])), SR))}
elev_input
tidy_iNEXT
# get one of the bands
as.data.frame(filter(tidy_iNEXT, Elevation == 200))
# get one of the bands
as.data.frame(filter(tidy_iNEXT, index == '1LowDipt:200'))
# get one of the bands
selelct(filter(tidy_iNEXT, index == '1LowDipt:200')), SR)
# get one of the bands
selelct(filter(tidy_iNEXT, index == '1LowDipt:200'), SR)
# get one of the bands
select(filter(tidy_iNEXT, index == '1LowDipt:200'), SR)
# get one of the bands
as.list(select(filter(tidy_iNEXT, index == '1LowDipt:200'), SR))
# create list for iNEXT
counter<-length(unique(tidy_iNEXT$index))
counter
# create list for iNEXT
idxs<-unique(tidy_iNEXT$index)
counter<-length(unique(tidy_iNEXT$index))
tmp
print(tmp)
subset(tidy_iNEXT, index = idxs[i], select = SR)
i=1
subset(as.data.frame(tidy_iNEXT), index = idxs[i], select = SR)
idxs[i]
subset(as.data.frame(tidy_iNEXT), index = idxs[i])
?subset
tmp <- subset(as.data.frame(tidy_iNEXT), index = idxs[i]), select = SR, drop = TRUE)
tmp <- subset(as.data.frame(tidy_iNEXT), index = idxs[i], select = SR, drop = TRUE)
tmp
for (i in 1:2){
tmp <- subset(as.data.frame(tidy_iNEXT), index == idxs[i], select = SR, drop = TRUE)
print(tmp)
}
tmp <- na.omit(subset(as.data.frame(tidy_iNEXT), index == idxs[i], select = SR, drop = TRUE))
print(tmp)
i=1
na.omit(subset(as.data.frame(tidy_iNEXT), index == idxs[i], select = SR, drop = TRUE))
na.omit(subset(as.data.frame(tidy_iNEXT), index == idxs[i], select = SR))
i=2
na.omit(subset(as.data.frame(tidy_iNEXT), index == idxs[i], select = SR))
elev_input<- list()
for (i in 1:counter){
tmp <- na.omit(subset(as.data.frame(tidy_iNEXT), index == idxs[i], select = SR))
print(tmp)
}
names(elev_input)<-unique(tidy_iNEXT$index)
elev_input
elev_input[i]<-tmp
elev_input<- list()
for (i in 1:counter){
tmp <- na.omit(subset(as.data.frame(tidy_iNEXT), index == idxs[i], select = SR))
elev_input[i]<-tmp
}
names(elev_input)<-unique(tidy_iNEXT$index)
elev_input[1]
elev_input
head(elev)
range(elev$Elevation)
unique(elev$Elevation)
?coalesce
unique(elev$Elevation)
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count)) %>%
# group elevations
mutate(band =
ifelse(Elevation %in% 200:500, "200-500"),
ifelse(Elevation %in% 550:1000, "550-1000"),
ifelse(Elevation %in% 1050:1500, "1050-1500"),
iflese(Elevation %in% 1550:1900, '1550-1900'))
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count)))
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
tidy_iNEXT
mutate(tidy_iNEXT,
band = ifelse(Elevation %in% 200:500, "200-500"),
ifelse(Elevation %in% 550:1000, "550-1000"),
ifelse(Elevation %in% 1050:1500, "1050-1500"),
iflese(Elevation %in% 1550:1900, '1550-1900'))
ifelse(Elevation %in% 550:1000, "550-1000",
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
# group elevations
mutate(tidy_iNEXT,
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
# group elevations
mutate(tidy_iNEXT, band =
ifelse(Elevation %in% 200:500, "200-500",
ifelse(Elevation %in% 550:1000, "550-1000",
ifelse(Elevation %in% 1050:1500, "1050-1500", '1550-1900'))))
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count)) %>%
# group elevations into bands
mutate(tidy_iNEXT, band =
ifelse(Elevation %in% 200:500, "200-500",
ifelse(Elevation %in% 550:1000, "550-1000",
ifelse(Elevation %in% 1050:1500, "1050-1500", '1550-1900'))))
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count)) %>%
# group elevations into bands
mutate(band =
ifelse(Elevation %in% 200:500, "200-500",
ifelse(Elevation %in% 550:1000, "550-1000",
ifelse(Elevation %in% 1050:1500, "1050-1500", '1550-1900'))))
# get one of the bands
as.list(select(filter(tidy_iNEXT, band == '200-500'), SR))
tidy_iNEXT
## create tidy
tidy_elev <- gather(elev, species, count, -MountainName, -Elevation, -ForestType, -Date)
# group elevations into bands
tidy_elev <- mutate(tidy_elev,
band =
ifelse(Elevation %in% 200:500, "200-500",
ifelse(Elevation %in% 550:1000, "550-1000",
ifelse(Elevation %in% 1050:1500, "1050-1500", '1550-1900'))))
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(band, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
tidy_iNEXT
unique(tidy_iNEXT$band)
# group elevations into bands
tidy_elev <- mutate(tidy_elev,
band =
ifelse(Elevation %in% 200:500, "a-200-500",
ifelse(Elevation %in% 550:1000, "b-550-1000",
ifelse(Elevation %in% 1050:1500, "c-1050-1500", 'd-1550-1900'))))
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(band, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
# get one of the bands
as.list(select(filter(tidy_iNEXT, band == '200-500'), SR))
tidy_iNEXT
# get one of the bands
as.list(select(filter(tidy_iNEXT, band == 'a-200-500'), SR))
filter(tidy_elev, band == 'a-200-500')
# get one of the bands
select(filter(tidy_iNEXT, band == 'a-200-500'), SR)
# get one of the bands
filter(tidy_iNEXT, band == 'a-200-500')
tidy_elev %>%
# need elev and forest
group_by(band, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
tidy_elev
## create tidy
tidy_elev <- gather(elev, species, count, -MountainName, -Elevation, -ForestType, -Date)
# group elevations into bands
tidy_elev <- mutate(tidy_elev,
band =
ifelse(Elevation %in% 200:500, "a-200-500",
ifelse(Elevation %in% 550:1000, "b-550-1000",
ifelse(Elevation %in% 1050:1500, "c-1050-1500", 'd-1550-1900'))))
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(band, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
# get one of the bands
filter(tidy_iNEXT, band == 'a-200-500')
head(elev)
# group elevations into bands
elev_banded <- mutate(elev,
band =
ifelse(Elevation %in% 200:500, "a-200-500",
ifelse(Elevation %in% 550:1000, "b-550-1000",
ifelse(Elevation %in% 1050:1500, "c-1050-1500", 'd-1550-1900'))))
elev_banded
# rowsums by band to get iNEXT vals
elev_banded %>% group_by(band, species) %>%
summarise_all(.funs = sum())
elev_banded
elev_banded
names(elev_banded)
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = sum())
elev_banded
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date)
# rowsums by band to get iNEXT vals
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(funs = sum())
# rowsums by band to get iNEXT vals
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = sum)
summarise_all(.funs = function(sum(x, na.rm = TRUE))
# rowsums by band to get iNEXT vals
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(sum(x, na.rm = TRUE)))
# rowsums by band to get iNEXT vals
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
# create list for iNEXT
idxs<-unique(elev_banded$band)
idxs
counter<-length(unique(elev_banded$band))
elev_input<- list()
elev_input<- list()
for (i in 1:counter){
elev_input[i] <- elev_banded[i,][elev_banded[i,]>0]
}
elev_input
i=1
elev_banded[i,]
elev_banded
# rowsums by band to get iNEXT vals
elev_banded<-elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
# create list for iNEXT
idxs<-unique(elev_banded$band)
counter<-length(unique(elev_banded$band))
elev_input<- list()
for (i in 1:counter){
elev_input[i] <- elev_banded[i,][elev_banded[i,]>0]
}
elev_banded[i,]
elev_banded[i,][elev_banded[i,]>0]
elev_banded[i,]>0
elev_banded[i,][elev_banded[i,]>0]
elev_input[i] <- elev_banded[i,][elev_banded>0]
tmp
tmp <- elev_banded[i,]
tmp
tmp[tmp[-,'band']>0]
tmp[-,'band'>0]
tmp[,-'band'>0]
tmp[,-c(1)]
tmp[,-c(1)]>0
tmp[tmp[,-c(1)]>0]
tmp[tmp[,-c(1)]>0,]
tmp[,tmp[,-c(1)]>0]
tmp <- elev_banded[i,-c(1)]
tmp
tmp <- elev_banded[i,-c(1)]>0
tmp
tmp[tmp>0]
tmp[,tmp>0]
tmp <- elev_banded[i,-c(1)]
tmp[,tmp>0]
tmp <- elev_banded[i,-c(1)]
tmp
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp
tmp[tmp>0]
elev_input<- list()
for (i in 1:counter){
tmp <- as.data.frame(elev_banded[i,-c(1)])
elev_input[i]<-tmp[tmp>0]
}
elev_input
i=1
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp
tmp<-tmp[tmp>0]
tmp
elev_input[i]<-tmp
elev_input[[i]]<-tmp
elev_input
elev_input<- list()
for (i in 1:1){
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp<-tmp[tmp>0]
elev_input[[i]]<-tmp
}
elev_input
elev_input<- list()
for (i in 1:counter){
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp<-tmp[tmp>0]
elev_input[[i]]<-tmp
}
names(elev_input)<-unique(elev_banded$band)
elev_input[1]
elev_input
iNEXT(elev_input)
head(elev)
#rowsums by forest band to get iNEXT vals
elev_type<-elev %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#rowsums by forest band to get iNEXT vals
elev_type<-elev %>%
select(-MountainName, -Elevation, -Date) %>%
group_by(ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
elev_type
elev_BAND_input<- list()
# create TYPE list for iNEXT
idxs<-unique(elev_type$ForestType)
# create TYPE list for iNEXT
type_counter<-length(unique(elev_type$ForestType))
# create TYPE list for iNEXT
type_counter<-length(unique(elev_type$ForestType))
elev_TYPE_input<- list()
for (i in 1:type_counter){
tmp <- as.data.frame(elev_type[i,-c(1)])
tmp<-tmp[tmp>0]
elev_TYPE_input[[i]]<-tmp
}
names(elev_TYPE_input)<-unique(elev_type$ForestType)
elev_TYPE_input
# Run iNEXT ----
band_mod <- iNEXT(elev_BAND_input)
# rowsums by band to get iNEXT vals
elev_banded<-elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#rowsums by forest band to get iNEXT vals
elev_type<-elev %>%
select(-MountainName, -Elevation, -Date) %>%
group_by(ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
# create BAND list for iNEXT
band_counter<-length(unique(elev_banded$band))
elev_BAND_input<- list()
for (i in 1:band_counter){
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp<-tmp[tmp>0]
elev_BAND_input[[i]]<-tmp
}
names(elev_BAND_input)<-unique(elev_banded$band)
# create TYPE list for iNEXT
type_counter<-length(unique(elev_type$ForestType))
elev_TYPE_input<- list()
for (i in 1:type_counter){
tmp <- as.data.frame(elev_type[i,-c(1)])
tmp<-tmp[tmp>0]
elev_TYPE_input[[i]]<-tmp
}
names(elev_TYPE_input)<-unique(elev_type$ForestType)
# Run iNEXT ----
band_mod <- iNEXT(elev_BAND_input)
type_mod <- iNEXT(elev_TYPE_input)
plot(band_mod)
plot(type_mod)
# Run iNEXT ----
band_mod <- iNEXT(elev_BAND_input, datatype = 'abundance', nboot = 999)
type_mod <- iNEXT(elev_TYPE_input, datatype = 'abundance', nboot = 999)
plot(band_mod)
plot(type_mod)
