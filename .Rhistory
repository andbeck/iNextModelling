group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
tidy_iNEXT
mutate(tidy_iNEXT,
band = ifelse(Elevation %in% 200:500, "200-500"),
ifelse(Elevation %in% 550:1000, "550-1000"),
ifelse(Elevation %in% 1050:1500, "1050-1500"),
iflese(Elevation %in% 1550:1900, '1550-1900'))
ifelse(Elevation %in% 550:1000, "550-1000",
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
# group elevations
mutate(tidy_iNEXT,
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
# group elevations
mutate(tidy_iNEXT, band =
ifelse(Elevation %in% 200:500, "200-500",
ifelse(Elevation %in% 550:1000, "550-1000",
ifelse(Elevation %in% 1050:1500, "1050-1500", '1550-1900'))))
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count)) %>%
# group elevations into bands
mutate(tidy_iNEXT, band =
ifelse(Elevation %in% 200:500, "200-500",
ifelse(Elevation %in% 550:1000, "550-1000",
ifelse(Elevation %in% 1050:1500, "1050-1500", '1550-1900'))))
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(Elevation, ForestType, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count)) %>%
# group elevations into bands
mutate(band =
ifelse(Elevation %in% 200:500, "200-500",
ifelse(Elevation %in% 550:1000, "550-1000",
ifelse(Elevation %in% 1050:1500, "1050-1500", '1550-1900'))))
# get one of the bands
as.list(select(filter(tidy_iNEXT, band == '200-500'), SR))
tidy_iNEXT
## create tidy
tidy_elev <- gather(elev, species, count, -MountainName, -Elevation, -ForestType, -Date)
# group elevations into bands
tidy_elev <- mutate(tidy_elev,
band =
ifelse(Elevation %in% 200:500, "200-500",
ifelse(Elevation %in% 550:1000, "550-1000",
ifelse(Elevation %in% 1050:1500, "1050-1500", '1550-1900'))))
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(band, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
tidy_iNEXT
unique(tidy_iNEXT$band)
# group elevations into bands
tidy_elev <- mutate(tidy_elev,
band =
ifelse(Elevation %in% 200:500, "a-200-500",
ifelse(Elevation %in% 550:1000, "b-550-1000",
ifelse(Elevation %in% 1050:1500, "c-1050-1500", 'd-1550-1900'))))
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(band, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
# get one of the bands
as.list(select(filter(tidy_iNEXT, band == '200-500'), SR))
tidy_iNEXT
# get one of the bands
as.list(select(filter(tidy_iNEXT, band == 'a-200-500'), SR))
filter(tidy_elev, band == 'a-200-500')
# get one of the bands
select(filter(tidy_iNEXT, band == 'a-200-500'), SR)
# get one of the bands
filter(tidy_iNEXT, band == 'a-200-500')
tidy_elev %>%
# need elev and forest
group_by(band, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
tidy_elev
## create tidy
tidy_elev <- gather(elev, species, count, -MountainName, -Elevation, -ForestType, -Date)
# group elevations into bands
tidy_elev <- mutate(tidy_elev,
band =
ifelse(Elevation %in% 200:500, "a-200-500",
ifelse(Elevation %in% 550:1000, "b-550-1000",
ifelse(Elevation %in% 1050:1500, "c-1050-1500", 'd-1550-1900'))))
## summarise for iNEXT
tidy_iNEXT <- tidy_elev %>%
# need elev and forest
group_by(band, species) %>%
# sum the counts among the mountain ranges
summarise(SR = sum(count))
# get one of the bands
filter(tidy_iNEXT, band == 'a-200-500')
head(elev)
# group elevations into bands
elev_banded <- mutate(elev,
band =
ifelse(Elevation %in% 200:500, "a-200-500",
ifelse(Elevation %in% 550:1000, "b-550-1000",
ifelse(Elevation %in% 1050:1500, "c-1050-1500", 'd-1550-1900'))))
elev_banded
# rowsums by band to get iNEXT vals
elev_banded %>% group_by(band, species) %>%
summarise_all(.funs = sum())
elev_banded
elev_banded
names(elev_banded)
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = sum())
elev_banded
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date)
# rowsums by band to get iNEXT vals
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(funs = sum())
# rowsums by band to get iNEXT vals
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = sum)
summarise_all(.funs = function(sum(x, na.rm = TRUE))
# rowsums by band to get iNEXT vals
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(sum(x, na.rm = TRUE)))
# rowsums by band to get iNEXT vals
elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
# create list for iNEXT
idxs<-unique(elev_banded$band)
idxs
counter<-length(unique(elev_banded$band))
elev_input<- list()
elev_input<- list()
for (i in 1:counter){
elev_input[i] <- elev_banded[i,][elev_banded[i,]>0]
}
elev_input
i=1
elev_banded[i,]
elev_banded
# rowsums by band to get iNEXT vals
elev_banded<-elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
# create list for iNEXT
idxs<-unique(elev_banded$band)
counter<-length(unique(elev_banded$band))
elev_input<- list()
for (i in 1:counter){
elev_input[i] <- elev_banded[i,][elev_banded[i,]>0]
}
elev_banded[i,]
elev_banded[i,][elev_banded[i,]>0]
elev_banded[i,]>0
elev_banded[i,][elev_banded[i,]>0]
elev_input[i] <- elev_banded[i,][elev_banded>0]
tmp
tmp <- elev_banded[i,]
tmp
tmp[tmp[-,'band']>0]
tmp[-,'band'>0]
tmp[,-'band'>0]
tmp[,-c(1)]
tmp[,-c(1)]>0
tmp[tmp[,-c(1)]>0]
tmp[tmp[,-c(1)]>0,]
tmp[,tmp[,-c(1)]>0]
tmp <- elev_banded[i,-c(1)]
tmp
tmp <- elev_banded[i,-c(1)]>0
tmp
tmp[tmp>0]
tmp[,tmp>0]
tmp <- elev_banded[i,-c(1)]
tmp[,tmp>0]
tmp <- elev_banded[i,-c(1)]
tmp
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp
tmp[tmp>0]
elev_input<- list()
for (i in 1:counter){
tmp <- as.data.frame(elev_banded[i,-c(1)])
elev_input[i]<-tmp[tmp>0]
}
elev_input
i=1
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp
tmp<-tmp[tmp>0]
tmp
elev_input[i]<-tmp
elev_input[[i]]<-tmp
elev_input
elev_input<- list()
for (i in 1:1){
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp<-tmp[tmp>0]
elev_input[[i]]<-tmp
}
elev_input
elev_input<- list()
for (i in 1:counter){
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp<-tmp[tmp>0]
elev_input[[i]]<-tmp
}
names(elev_input)<-unique(elev_banded$band)
elev_input[1]
elev_input
iNEXT(elev_input)
head(elev)
#rowsums by forest band to get iNEXT vals
elev_type<-elev %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#rowsums by forest band to get iNEXT vals
elev_type<-elev %>%
select(-MountainName, -Elevation, -Date) %>%
group_by(ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
elev_type
elev_BAND_input<- list()
# create TYPE list for iNEXT
idxs<-unique(elev_type$ForestType)
# create TYPE list for iNEXT
type_counter<-length(unique(elev_type$ForestType))
# create TYPE list for iNEXT
type_counter<-length(unique(elev_type$ForestType))
elev_TYPE_input<- list()
for (i in 1:type_counter){
tmp <- as.data.frame(elev_type[i,-c(1)])
tmp<-tmp[tmp>0]
elev_TYPE_input[[i]]<-tmp
}
names(elev_TYPE_input)<-unique(elev_type$ForestType)
elev_TYPE_input
# Run iNEXT ----
band_mod <- iNEXT(elev_BAND_input)
# rowsums by band to get iNEXT vals
elev_banded<-elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#rowsums by forest band to get iNEXT vals
elev_type<-elev %>%
select(-MountainName, -Elevation, -Date) %>%
group_by(ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
# create BAND list for iNEXT
band_counter<-length(unique(elev_banded$band))
elev_BAND_input<- list()
for (i in 1:band_counter){
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp<-tmp[tmp>0]
elev_BAND_input[[i]]<-tmp
}
names(elev_BAND_input)<-unique(elev_banded$band)
# create TYPE list for iNEXT
type_counter<-length(unique(elev_type$ForestType))
elev_TYPE_input<- list()
for (i in 1:type_counter){
tmp <- as.data.frame(elev_type[i,-c(1)])
tmp<-tmp[tmp>0]
elev_TYPE_input[[i]]<-tmp
}
names(elev_TYPE_input)<-unique(elev_type$ForestType)
# Run iNEXT ----
band_mod <- iNEXT(elev_BAND_input)
type_mod <- iNEXT(elev_TYPE_input)
plot(band_mod)
plot(type_mod)
# Run iNEXT ----
band_mod <- iNEXT(elev_BAND_input, datatype = 'abundance', nboot = 999)
type_mod <- iNEXT(elev_TYPE_input, datatype = 'abundance', nboot = 999)
plot(band_mod)
plot(type_mod)
## Nada Chapters 2-3 iNext Modelling ----
## libraries ----
library(iNEXT)
library(tidyverse)
## data import ----
# elevation
elev <- read.csv('SpeciesAdultData/All-Elevation.csv')
# forest compartment
compart <- read.csv('SpeciesAdultData/All_DTC2.csv')
## Working with Elevation Data ----
names(elev)
head(elev)
# group elevations into bands ----
# this is Option 2 for grouping the data - Option 1 is by Forest Type
elev_banded <- mutate(elev,
band =
ifelse(Elevation %in% 200:500, "a-200-500",
ifelse(Elevation %in% 550:1000, "b-550-1000",
ifelse(Elevation %in% 1050:1500, "c-1050-1500", 'd-1550-1900'))))
# rowsums by band to get iNEXT vals
elev_banded<-elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#rowsums by forest band to get iNEXT vals
elev_type<-elev %>%
select(-MountainName, -Elevation, -Date) %>%
group_by(ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#colsums by mountain AND forest band to get iNEXT vals
elev_MF<-elev %>%
select(-Elevation, -Date) %>%
group_by(Mountain, ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#colsums by mountain AND forest band to get iNEXT vals
elev_MF<-elev %>%
select(-Elevation, -Date) %>%
group_by(MountainName, ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
elev_MF
#colsums by mountain AND forest band to get iNEXT vals
elev_MF<-elev %>%
select(-Elevation, -Date) %>%
group_by(MountainName, ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
# create single column of mountain and type name
mutate(MName_FType = paste(MountainName, ForestType, sep = ':'))
elev_MNFT_input<- list()
elev_MN_FT_input[[i]]<-tmp
elev_MF
#colsums by mountain AND forest band to get iNEXT vals
elev_MF<-elev %>%
select(-Elevation, -Date) %>%
group_by(MountainName, ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
# create single column of mountain and type name
mutate(MName_FType = paste(MountainName, ForestType, sep = ':'))
dim(elev_MF)
tmp <- as.data.frame(elev_MF[i,-c(1,2,31)])
# create MOUNTAIN:TYPE list for iNEXT
MN_FT_counter<-length(unique(elev_MF$MName_FType))
elev_MNFT_input<- list()
for (i in 1:MN_FT_counter){
tmp <- as.data.frame(elev_MF[i,-c(1,2,31)])
tmp<-tmp[tmp>0]
elev_MN_FT_input[[i]]<-tmp
}
elev_MNFT_input[[i]]<-tmp
elev_MNFT_input<- list()
for (i in 1:MN_FT_counter){
tmp <- as.data.frame(elev_MF[i,-c(1,2,31)])
tmp<-tmp[tmp>0]
elev_MNFT_input[[i]]<-tmp
}
elev_MF
names(elev_MNFT_input)<-unique(elev_MF$MName_FType)
# Run and plot iNEXT ----
band_mod <- iNEXT(elev_BAND_input, datatype = 'abundance', nboot = 999)
## Nada Chapters 2-3 iNext Modelling ----
## libraries ----
library(iNEXT)
library(tidyverse)
## data import ----
# elevation
elev <- read.csv('SpeciesAdultData/All-Elevation.csv')
# forest compartment
compart <- read.csv('SpeciesAdultData/All_DTC2.csv')
## Working with Elevation Data ----
names(elev)
head(elev)
# group elevations into bands ----
# this is Option 2 for grouping the data - Option 1 is by Forest Type
elev_banded <- mutate(elev,
band =
ifelse(Elevation %in% 200:500, "a-200-500",
ifelse(Elevation %in% 550:1000, "b-550-1000",
ifelse(Elevation %in% 1050:1500, "c-1050-1500", 'd-1550-1900'))))
## Create Column SUMS (by species) to prep for List for iNEXT ----
# colums by band to get iNEXT vals
elev_banded<-elev_banded %>%
select(-MountainName, -Elevation, -ForestType, -Date) %>%
group_by(band) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#colsums by forest band to get iNEXT vals
elev_type<-elev %>%
select(-MountainName, -Elevation, -Date) %>%
group_by(ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE)))
#colsums by mountain AND forest band to get iNEXT vals
elev_MF<-elev %>%
select(-Elevation, -Date) %>%
group_by(MountainName, ForestType) %>%
summarise_all(.funs = function(x) (sum(x, na.rm = TRUE))) %>%
# create single column of mountain and type name
mutate(MName_FType = paste(MountainName, ForestType, sep = ':'))
## Create Lists for iNEXT ----
# create BAND list for iNEXT
band_counter<-length(unique(elev_banded$band))
elev_BAND_input<- list()
for (i in 1:band_counter){
tmp <- as.data.frame(elev_banded[i,-c(1)])
tmp<-tmp[tmp>0]
elev_BAND_input[[i]]<-tmp
}
names(elev_BAND_input)<-unique(elev_banded$band)
# create TYPE list for iNEXT
type_counter<-length(unique(elev_type$ForestType))
elev_TYPE_input<- list()
for (i in 1:type_counter){
tmp <- as.data.frame(elev_type[i,-c(1)])
tmp<-tmp[tmp>0]
elev_TYPE_input[[i]]<-tmp
}
names(elev_TYPE_input)<-unique(elev_type$ForestType)
# create MOUNTAIN:TYPE list for iNEXT
MN_FT_counter<-length(unique(elev_MF$MName_FType))
elev_MNFT_input<- list()
for (i in 1:MN_FT_counter){
tmp <- as.data.frame(elev_MF[i,-c(1,2,31)])
tmp<-tmp[tmp>0]
elev_MNFT_input[[i]]<-tmp
}
names(elev_MNFT_input)<-unique(elev_MF$MName_FType)
# Run and plot iNEXT ----
band_mod <- iNEXT(elev_BAND_input, datatype = 'abundance', nboot = 999)
type_mod <- iNEXT(elev_TYPE_input, datatype = 'abundance', nboot = 999)
MNFT_mod <- iNEXT(elev_MNFT_input, datatype = 'abundance', nboot = 999)
elev_MNFT_input
# check for entries with NO SR estimated
elev_MNFT_input==NULL
# check for entries with NO SR estimated
elev_MNFT_input>0
# check for entries with NO SR estimated
lapply(elev_MNFT_input, all>0)
# check for entries with NO SR estimated
sapply(elev_MNFT_input, all>0)
# check for entries with NO SR estimated
all(elev_MNFT_input>0)
# check for entries with NO SR estimated
Filter(length, elev_MNFT_input)
# Get Rid of entries with NO SR estimated
elev_MNFT_input <- Filter(length, elev_MNFT_input)
MNFT_mod <- iNEXT(elev_MNFT_input, datatype = 'abundance', nboot = 999)
plot(band_mod)
par(mfrow = c(1,3))
plot(band_mod)
plot(type_mod)
plot(MNFT_mod)
?Filter
elev_MNFT_input[lapply(elev_MNFT_input, length)>0]
elev_MNFT_input[lapply(elev_MNFT_input, length)>1]
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
elev_MNFT_input[lapply(elev_MNFT_input, length)>1]
# create MOUNTAIN:TYPE list for iNEXT
MN_FT_counter<-length(unique(elev_MF$MName_FType))
elev_MNFT_input<- list()
for (i in 1:MN_FT_counter){
tmp <- as.data.frame(elev_MF[i,-c(1,2,31)])
tmp<-tmp[tmp>0]
elev_MNFT_input[[i]]<-tmp
}
names(elev_MNFT_input)<-unique(elev_MF$MName_FType)
# Get Rid of entries with SR < 1 (iNEXT does not work without >2 species)
elev_MNFT_input <- elev_MNFT_input[lapply(elev_MNFT_input, length)>1]
MNFT_mod <- iNEXT(elev_MNFT_input, datatype = 'abundance', nboot = 999)
elev_MNFT_input
plot(MNFT_mod)
par(mfrow = c(1,3))
plot(band_mod)
plot(type_mod)
plot(MNFT_mod)
par(mfrow = c(1,3))
plot(band_mod, q=1)
plot(type_mod, q=1)
plot(MNFT_mod, q=1)
?plot.iNEXT
plot(MNFT_mod, type = 2)
par(mfrow = c(1,3))
plot(band_mod, type = 2)
plot(type_mod, type = 2)
plot(MNFT_mod, type = 2)
par(mfrow = c(1,3))
plot(band_mod, type = 3)
plot(type_mod, type = 3)
plot(MNFT_mod, type = 3)
